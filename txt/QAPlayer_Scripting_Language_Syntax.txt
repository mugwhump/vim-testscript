









QAPlayer Scripting Language Syntax


12/09/2014



























Scripts and Data Syntax	13
ExecuteScript	13
ExecuteScriptIfError	13
If / Else / EndIf	14
While / EndWhile	15
StopScriptIfError	15
StopScript	15
StopScriptIf	16
StopScriptIfFileExists	16
AddPath	16
AddPathSubfolder	17
RemovePath	17
RemovePathSubfolder	17
General Utilities Syntax	19
Log	19
ExecuteProgram	19
SetVariable	20
DeleteVariable	20
IsVariableExist / @param	20
CreateFile	21
WriteText	21
VerifyTextFile	22
VerifyTextFileLine	22
ReadTextFileLine	22
WaitForFile	23
WaitMilliseconds	23
WaitSeconds	24
WaitMinutes	24
AnimateExecution	24
CompareStrings	25
VerifyTextFileLine	26
VerifyTextFile	26
SetDateVariable	27
SetIntegerVariable	27
AddToDateVariable	27
AddToIntegerVariable	28
SplitToVariable	29
SetRandomNumberToVariable	29
SetRandomStringToVariable	30
ConvertStrToConcatXPath	30
ConvertIPDecVarToAddress	31
ConvertIPAddressVarToDec	31
SelectFromListToVariable	32
StartExecutionTime	32
StopExecutionTime	32
GetErrorCounter	33
ResetErrorCounter	33
GetReTryErrorCounter	33
ResetReTryErrorCounter	34
SetFileVariable	34
SetBinGuidVariable	35
SetGuidVariableFromBin	35
AddEscapeToVariable	35
CreateArrayVar	36
AddToArrayVar	36
RemoveFromArrayVarByIndex	37
DeleteArrayVar	37
GetArrayVarCount	37
CompareArrays	38
StringMethods	39
ConvertDateStrToDateTimeVar	39
ConvertUnixTimeStempToDateTimeVar	40
UI Automation Framework Syntax	41
GetWindow	41
MaximizeWindow	41
MinimizeWindow	41
RestoreWindow	42
CloseWindow	42
TypeText	42
VerifyText	43
VerifyHelpText	43
ClickControl	44
ClickButton	44
CheckBox	45
VerifyCheckBox	45
ClickRadio	46
VerifyRadio	46
ClickItem	47
VerifyItem	47
ClickCombo	48
RightClickMenuOption	48
VerifyControlProperty	50
Reflection Syntax	51
LoadDll	51
ExecuteMethod	51
Hyper-V PowerShell Syntax	53
ConnectToVMServer	53
StartVM	53
ShutdownVM	54
StopVM	54
RestoreFirstVMSnapshot	54
CreateVMSnapshot	55
RestoreVMSnapshot	55
DeleteVMSnapshot	56
Web UI Syntax	57
Before we start: How do you search a web control in QA Player?	57
StartWebEngine	57
StopWebEngine	58
OpenWebUrl	58
TypeWebText	58
ClickWebControl	59
ClickWebLink	60
SubmitWebForm	60
SelectWebValue	60
GetWebCookieValue	61
GetWebTitle	62
CompareWebTitle	62
GetWebText	62
GetWebValue	63
CompareWebText	63
CompareWebValue	64
GetWebCheckStatus	65
GetWebSelectedLabel	66
CompareWebSelectedLabel	66
IsWebValueIncluded	67
RefreshWebPage	67
FocusWebWindow	67
FocusWebControl	68
MaximizeWebWindow	68
SelectWebWindow	68
CloseWebWindow	69
ToggleWebControl	69
WaitForWebPageToLoad	70
IsWebElementPresent	71
IsWebElementClickable	71
IsWebElementEditable	72
IsWebTextPresent	73
GetWebCell	74
GetWebCellByRef	75
IsWebValueIncluded	76
SelectWebIndex	76
SetWebCheckBox	76
GetWebTextExists	77
GetWebTable	77
SendWebKeys	78
DragAndDropWebElement	78
ClickWebCell	78
ClickWebCellByRef	79
SetWebWaitTime	80
GoWebPageBack	80
WaitUntilWebTableRowIsDisplayed	81
CountWebTableColumns	81
CountWebTableRows	82
GetWebUrl	82
WaitForWebCellValue	84
WaitForWebCellValueByRef	84
VerifyWebColumnValue	85
TryNextScriptAgainIfError	86
ClickWebRow	87
FindInWebTable	87
VerifyWebColumnOrder	88
IsWebElementVisible	88
SetWebProgressElement	89
GetWebControlsCount	90
GetWebAttributeValue	90
HandleWebWindowAlert	90
GetWebSelectElementIndexByAttrValue	91
XML Syntax	91
SetXmlDefine	92
SetXmlSettingValue	92
ExcludeXmlSetting	92
VerifyXmlSettings	93
LoadXmlDocFile	93
GetXmlDocElementValue	94
GetXmlDocNodeCount	94
VerifyXmlDocElementExists	94
VerifyXmlDocElementValue	95
DB Syntax	97
OpenDBConnection	97
VerifyDBValue	97
GetDBValue	98
GetDBValues	98
CloseDBConnection	99
UpdateDB	99
RunDBScript	99
RunDBStoredProcedure	100
WaitForDBData	101
MongoDB Syntax	102
Special Note for Mongo:	102
ConnectToMongoDBServer	102
DisconnectMongoDBServer	103
CountMongoDBBsonDocuments	103
GetMongoDBBsonDocuments	104
AggregateMongoDBCollection	105
RemoveMongoDBBsonDocuments	106
UpdateMongoDBBsonDocuments	106
InsertMongoDBBsonDocuments	107
Registry Verification Syntax	108
VerifyRegKeyExists	108
VerifyRegValueExists	108
VerifyRegValue	109
GetRegValue	110
SetRegValue	111
Json Syntax	111
CreateJsonDoc	111
SetJsonDocObject	112
AddJsonDocChild	112
FinalizeJsonDocObject	113
VerifyJsonValue	113
VerifyJsonElementExists	114
ClearJsonObjects	114
RemoveJsonDocElement	114
AddJsonDocElement	115
AddJsonDocPair	115
VerifyJsonDocPair	116
AddJsonDocRoot	116
CompareJsonDocObjects	117
GetJsonDocElementValue	117
ReplaceJsonDocSubstring	118
LogJsonDocOutput	118
GetJsonDocArrayCount	118
FlatJsonDocArray	119
CloneJsonDocObject	120
JsonReadConfigFile	120
CompareJsonDocElementValue	121
GetJsonDocArrayElementIndex	121
JsonConvertFromXMLStr	122
RESTful Syntax	123
SetRESTfulHeader	123
CallRESTfulWebService	123
SetVarFromRESTfulHeader	124
VerifyRESTfulHeaderExists	124
VerifyRESTfulHeaderValue	124
VerifyRESTfulCallTime	125
VerifyRESTfulStatusCode	125
EditRESTfulHeaderValue	125
Spira Syntax	127
SetSpira	127
StartSpiraTCRun	127
LogSpiraTCResults	128
FinalizeResults	128
AddEnvironmentItem	128
CreateResultsSummary	129
EnableSpiraUpdate	129
WaitIfWinProcInstances	130
KillWinProcess	130
KillWinTask	130
VerifyWinProcessRun	131
VerifyWinProcessMemory	131
VerifyWinProcessCPU	131
VerifyWinProcessTitle	132
VMWare Syntax	133
ConnectToVMWServer	133
OpenVMW	134
StartVMW	134
CreateVMWSnapshot	135
RestoreFirstVMWSnapshot	135
DeleteVMWSnapshot	136
ShutdownVMW	136
RevertToVMWSnapshot	136
LoginGuestVMW	137
CreateVMWFolder	138
CopyFileFromHostToVMWGuest	138
RunProgramInVMWGuest	139
CopyFileFromVMWGuestToHost	139
DeleteVMWFolder	140
DeleteVMWFile	140
PauseVMW	141
UnpauseVMW	141
ResetVMW	142
SuspendVMW	142
DirectoryExistsInVMWGuest	143
FileExistsInVMWGuest	143
RenameFileInVMWGuest	144
RunScriptInVMWGuest	144
CaptureVMWScreenImage	145
CloneVMW	145
DeleteVMW	146
IOFile Syntax	147
SetPermissions	147
SetAttributes	147
CopyFiles	148
CopyFolders	148
CreateFolder	149
DeleteFolders	149
DeleteFiles	150
EmptyFolders	150
MoveFiles	151
MoveFolders	151
CompressFiles	152
GetXMLNodeCountValue	152
CompressFolders	152
DecompressFiles	153
VerifyFileExists	153
VerifyFolderExists	154
ConvertXMLInZipToString	154
MergeXMLsToOneFile	155
Network Syntax	156
Ping	156
MapDrive	156
UnmapDrive	156
UnmapDrives	157
CheckNetwork	157
ConnectToServer	157
DisconnectServer	158
DisconnectServers	158
Email Syntax	159
SetMailServer	159
SendEmail	159
SendEmailFromFiles	160
Performance Monitor Syntax	161
VerifyPerformanceCounter	161
GetPerformanceCounterValue	161
WaitIfPerformanceCounter	162
WinEvent Syntax	163
VerifyWinEvents	163
CreateWinEvents	164
DeleteWinEvents	164
WinService Syntax	165
EnableWService	165
DisableService	165
StartService	165
StopService	166
RestartService	166
VerifyRunningService	166
VerifyNotRunningService	167
VerifyDisplayNameService	167
WCF Syntax	168
SetWCFHeader	168
CallWCFWebService	168
SetVarFromWCFHeader	169
VerifyWCFHeaderExists	169
VerifyWCFHeaderValue	169
VerifyWCFCallTime	170
VerifyWCFStatusCode	170
EditWCFHeaderValue	170
QA Player Variables	172
DOUBLESLASH	172
RANDOMNUMBER	172
WAITFORWEBELEMENT	172
CPUPERCENTAGE	172
ERRORLIMIT	173
CURRENTSCRIPTREPETITION	173
CURRENTSCRIPTFOLDER	173
CURRENTDATAROW	173
NEWGUID	173
CURRENTDATAFILE	174
ITEMCOUNTER	174
TCFAILED	174
LASTSTATEMENTRESULT	174
LASTEXITCODE	175
UTCDATETIMENOW	175
Image Comparison Feature	176
DesktopScreenshotCapture	176
ImageCompare	176
How to exclude the area from the comparison?	177
QA Player Command Prompt	180
Appendix	181
ControlData	181



Scripts and Data Syntax
The statements or commands in this section are our most important building blocks. These statements allow us to organize our automation efforts in Scripts that do specific tasks. Also these statements allow us to use data files and as a consequence reuse our scripts in a very efficient and flexible way.

ExecuteScript
Executes or calls a script.
Syntax
ExecuteScript ScriptName [Repetitions [DataFileName StartingRow]]
Parameters
* ScriptName — Constant value. Name of the script file without extension.
* Repetitions — Integer. Optional parameter. Number of times the script will be executed.
* DataFileName — Constant value. Optional parameter. Name of the data file without extension. The data file fetches a row of data every time the script is executed.
* StartingRow — Integer. This parameter has to be provided if the DataFileName parameter is present. This is the number of the first data row to be fetched by the data file. If the repetitions parameter is more than 1, the subsequent(s) rows will be used.
Examples
// executes MyScript.ts one time
ExecuteScript MyScript

// executes MyScript.ts two times
ExecuteScript MyScript 2

// executes MyScript.ts one time, gets second row in MyData.csv data file.
ExecuteScript MyScript 1 MyData 2

ExecuteScriptIfError
Executes or calls a script if any error occurs.  This statement should be placed as the first line of the script so that QA Player can acknowledge this request and save the script name to be executed when error occurs.
Syntax
ExecuteScriptIfError ScriptName
Parameters
* ScriptName — Constant value. Name of the script file without extension.
Examples
// executes MyScript.ts when error
ExecuteScriptIfError MyScript







If / Else / EndIf
If ( expression )
   statement1
[Else 
   statement2]
EndIf
If the value of expression is true, statement1 is executed. If the optional else is present, statement2 is executed if the value of expression is false.  The if-else block must be ended with the EndIf statement or EOF will be executed.  Nested if-statement is supported, which means you can use one if or else statement inside another if or else statement.

Currently the if-statement supports two different syntaxes.  See the Syntax section for detail 
Syntax 1 (legacy)
If Value1 Operator Value2
   statement1
Else 
   statement2
EndIf

Parameters
* Value1 — Variable name, data file column name, or a string value.  Empty string “” is allowed.
* Operator —  ==, <>, !=, in, notin
* Value2 — Variable name, data file column name, or a string value.  Empty string “” is allowed.

Example
If “1” == “1”
   SetVarible V.Result “1”
Else
   SetVarible V.Result “2”
EndIf

Syntax 2 (new)
If Expression
   statement1
Else 
   statement2
EndIf

Parameters
* Expression – The conditional expression to be evaluated by the if-statement.  The most common arithmetic and programming expression are supported. 

NOTE: Any character between single quotes "'" are evaluated as String. 

The expression evaluator is provided by the open source library called NCalc.  For detailed documentation, you can visit their website at http://ncalc.codeplex.com/ 

Example
IF "((((%A%+1)<(%B%-200))&&('%C%'=='%D%'))||(%A%!=123))"
	Log	"INFO"		"GOOD !!!"	 
Else
	Log	"INFO"		"Bad !!!!"
EndIf

While / EndWhile
The while statement executes a statement or a block of statements until the specified expression evaluates to false.  The while loop block must be ended with the EndWhile statement or the looping will not happen.

Syntax
While Expression
   statement1
   statement2
   ...
EndWhile

Parameters
* Expression – The conditional expression to be evaluated by the if-statement.  The most common arithmetic and programming expression are supported.

Example
While "(%A%<123)&&(%B%>100)"
	Log		"INFO"	"While is GOOD !!!"	 
	SetVariable	A	"%A%+1"		"calc"
	SetVariable	B	"%B%-1"		"calc"
	IF "%A%==123"
		Log	"INFO"	"A is equal to 123"
	EndIf
EndWhile



StopScriptIfError
Terminates the execution of the script if any errors occur.

NOTE: This statement only needs to be placed once in your test case.  You DO NOT need to add this statement individually in your application scripts.  In the current setting for CC and NextGen project, this statement is placed at the TestCase.Execute.ts
Syntax
StopScriptIfError


StopScript
Terminates the execution of the script that is currently running and the execution returns to the caller script.

Syntax
StopScript

Example
SetVariable V.ESN1 “ABC”
StopScript



StopScriptIf
Terminates the execution of the script that is currently running if a condition is true.

Syntax
StopScriptIf Value1 Operator Value2

Parameters
* Value1 — Variable name, data file column name, or a string value.
* Operator — == or <>
* Value2 — Variable name, data file column name, or a string value.

Example
SetVariable V.ESN1 “ABC”
SetVariable V.ESN2 “123”
StopScriptIf V.ESN1 <> V.ESN2


StopScriptIfFileExists
Terminates the execution of the script that is currently running if the specified file exists.
Syntax
StopScriptIfFileExists FilePath

Parameters
* FilePath—The file path to check its existence.  

Example
StopScriptIfFileExists	"%CURRENTSCRIPTFOLDER%\QAPlayerLog.%V.AMCTIS.TC.TestCaseNumber%.txt"


AddPath
Adds a scripts path.  Enables the execution of scripts located in different folders than the starting script.

Syntax
AddPath Path

Parameters
* Path — Variable name, data file column name, or a string value.

Example
// Adds a folder to the path
AddPath "C:\Users\Username\Enterprise\Deployment\Script” 
//run the script MyScript which is in the folder Script
ExecuteScript MyScript 1 MyData 2


AddPathSubfolder
Adds a subfolder path so that the files under it can be used by QAPlayer. The path must be a under the current executed script path.

Syntax
AddPathSubfolder SubfolderName

Parameters
* SubfolderName — Variable name, data file column name, or a string value.

Example
// Adds a folder to the path
AddPath "C:\Users\Username\Enterprise\Deployment\Script” 
//run the script MyScript which is in the folder.
ExecuteScript MyScript 1 MyData 2
// Adds a subfolder to the path above
AddPathSubfolder "subfolder” 
//run the script MyNewScript which is in the subfolder.
ExecuteScript MyNewScript 1 MyNewData 1


RemovePath
Remove a scripts path. Removes a previously added path.

Syntax
RemovePath Path

Parameters
* Path — Variable name, data file column name, or a string value.

Example
// Adds a folder to the path
AddPath "C:\Users\Username\Enterprise\Deployment\Script” 
//run the script MyScript which is in the folder Script
ExecuteScript MyScript 1 MyData 2
// removes the path
RemovePath "C:\Users\Username\Enterprise\Deployment\Script”




RemovePathSubfolder
Remove a subfolder path from the current execution path. Removes a previously added subfolder path.

Syntax
RemovePathSubfolder SubfolderName

Parameters
* SubfolderName — Variable name, data file column name, or a string value.

Example
// Adds a folder to the path
AddPath "C:\Users\Username\Enterprise\Deployment\Script” 
//run the script MyScript which is in the folder.
ExecuteScript MyScript 1 MyData 2
// Adds a subfolder to the path above
AddPathSubfolder "subfolder” 
//run the script MyNewScript which is in the subfolder.
ExecuteScript MyNewScript 1 MyNewData 1
// removes the subfolder path
RemovePathSubfolder "subfolder”





General Utilities Syntax
The statements or commands in this section are of general and varied purposes. These statements help us execute external programs and make easier the tasks of scripting test cases.
Log
Write a string to the QA Player log. You can also specify the logging level (INFO/DEBUG/ERROR/WARN/FATAL) of this string so that it can be managed (show or hide) by the QA Player’s logging config file. (Log4Net.config) 
NOTE: Writing an ERROR or FATAL log will NOT fail the Spira test case.  This statement is simply writing a string to the QA Player log in the specified level.
Syntax
Log		Type		Value
Parameters
* Type – The type of the log: INFO/DEBUG/ERROR/WARN/FATAL
* Value – String value.  The string that you want to write to the log
Examples
Log		"INFO"		"==========================="	 
Log		"INFO"		"Start of Pagination Testing"
Log		"INFO"		"==========================="
Log		"WARN"		"This is a warning to you"	

ExecuteProgram
Executes a windows application or program. 

Syntax
ExecuteProgram (Wait | Continue) ProgramName ParameterList

Parameters
* Wait — Constant. Indicates that the current script will resume once the program completes its execution.
* Continue — Constant. Indicates that the current script will continue without waiting for the program to complete its execution.
* ProgramName — String value. The name of the program to be run.
* ParameterList — String values. If more than one, the values must be separated by spaces.

Examples
// Executes the batch file, and waits until completes
ExecuteProgram Wait “DisconnectDrive.bat”

// Opens MyTextFile.txt with notepad
ExecuteProgram Continue "notepad.exe" "c:\MyTextFile.txt"


SetVariable
Creates a variable, or assigns a value to it.
Syntax
SetVariable VariableName VariableValue [Operator]
Parameters
* VariableName — Constant value, user-defined name for the variable. All letters, numbers, and punctuation are legal in variable names, though it’s best to limit punctuation to underscores and periods. 
* VariableValue — Variable name, data file column name, or a string value.
* Operator — Optional parameter. Putting “calc” allows you to use ncalc expressions for VariableValue, much like in If statements.
Examples
// assigns a string value to the variable
SetVariable V.MyUserName “Name123”

// assigns a data file column name to the variable
SetVariable V.MyPassword DCPwd

// assigns a variable to the variable
SetVariable V.MyOtherUserName V.MyUserName

// assigns an expression to the variable
SetVariable V.MyCalculation “(2 + %V.ExampleVar%) / 3” “calc”

DeleteVariable
Remove a variable from memory.
Syntax
DeleteVariable VariableName 
Parameters
* VariableName — Constant value, user-defined name for the variable
Examples
// assigns a string value to the variable
SetVariable V.MyUserName “Name123”

// remove the variable if not used any more.
DeleteVariable V. MyUserName

IsVariableExist / @param
Check if a variable (regular or array) exists in the memory.  A log will be written to indicate the result of this check.  Error will not be thrown for either pass or fail result.
NOTE: This statement is useful in checking if the pre-requisite requirement of parameters has been met before executing an application script.  Place “@param VariableName” at the top of the application script.  It can be used not only to perform the check, but also to reminder the tester of what parameter variables are needed.
Syntax
IsVariableExist 	VariableName ResultVariableName
@param 			VariableName ResultVariableName
Parameters
* VariableName — The name of the variable that you want to check
* ResultVariableName (optional) — Return “true” or “false” to this variable based on the result of the checking

Examples
SetVariable		V.MyUserName	“ABC”
//V.MyUserName exists and a INFO log will be written to the log file
IsVariableExist	V.MyUserName
@param 			V.MyUserName

//V.Name doesn’t exist and a WARN log will be written to the log file
IsVariableExist	V.Name
@param 			V.Name


CreateFile
Creates a text file.

Syntax
CreateFile TextFileName

Parameters
* TextFileName — Variable name, data file column name, or a string value. The whole path of the txt file with file name and extension.

Example
CreateFile "C:\Users\Username\Documents\Enterprise\MyLog.txt"


WriteText
Writes a text string at the end of a text file. The file is created if does not exist.

Syntax
WriteText TextFileName TextString [NewLine]

Parameters
* TextFileName — Variable name, data file column name, or a string value. The whole path of the txt file with file name and extension.
* TextString – Variable name, data file column name, or a string value. The text to write in the file.
* NewLine – Constant value. Include if you want a new line after the text.

Example


VerifyTextFile
Verifies the content of a text file against a specific text string. If the condition is false an error will be logged.

Syntax
VerifyTextFile TextFileName Operator TextString

Parameters
* TextFileName — Variable name, data file column name, or a string value. The whole path of the txt file with file name and extension.
* Operator – Constant value. Variable name, data file column name, or a string value. <Contains | DoesNotContain>
* TextString – Variable name, data file column name, or a string value. The text to write in the file.

Examples
VerifyTextFile “C:\MyTextFile.txt” “Contains” “MyString”
VerifyTextFile “C:\MyTextFile.txt” “DoesNotContain” “Error”


VerifyTextFileLine
Verifies the content of a line in a text file against a specific text string. If the condition is false an error will be logged.

Syntax
VerifyTextFileLine TextFileName LineNumber Operator TextString

Parameters
* TextFileName — Variable name, data file column name, or a string value. The whole path of the txt file with file name and extension.
* LineNumber – Variable name, data file column name, or a string value. Number of the line to search the text string. Index is 1 based.
* Operator – Constant value. Variable name, data file column name, or a string value. <Contains | DoesNotContain | StartsWith | EndsWith | IsEqualTo>
* TextString – Variable name, data file column name, or a string value. The text to write in the file.

Examples
VerifyTextFileLine “C:\MyFile.txt” 1 “Contains” “MyString”
VerifyTextFileLine “C:\MyFile.txt” 2 “DoesNotContain” “Error”

ReadTextFileLine
Read the content of a line from a text file and assign to a variable.

Syntax
ReadTextFileLine TextFileName LineNumber VariableName WaitSeconds Operator

Parameters
* TextFileName — Variable name, data file column name, or a string value. The whole path of the txt file with file name and extension.
* LineNumber – Variable name, data file column name, or a string value. Number of the line to search the text string. Index is 1 based.
* VariableName – name of the variable.
* WaitSeconds – Number of seconds to retry when there is error
* Operator – “ReturnBlankWhenError” – By specifying this operator, QA Player will return a blank value to the variable ONLY in the following scenarios:
o The file is blank
o The file doesn’t have the line number specified in the test script.  For example, you want line 2 but there is only one line in the file.
Examples
ReadTextFileLine “C:\MyFile.txt” 1 “MyString”
ReadTextFileLine “C:\MyFile.txt” 2 “MyString2”
ReadTextFileLine  "C:\abc.txt"   1   "V.ABC"    5			"ReturnBlankWhenError"

WaitForFile
Waits for file to be created.

Syntax
WaitForFile FileName Minutes

Parameters
* FileName — Variable name, data file column name, or a string value. Name of the file to be created in the process.
* Minutes — Integer. Number of minutes the script will wait. If the file is not created, an error message will be logged.

Example
// Waits for the MyLog.txt file to be created for one minute
WaitForFile "C:\Users\Username\Documents\Enterprise\MyLog.txt" 1

WaitMilliseconds
Pauses the execution of the current script for a number of milliseconds.

Syntax
WaitMilliseconds Milliseconds

Parameters
* Milliseconds — Integer. Number of milliseconds to pause the execution of the current script.

Example
// Waits for 500 milliseconds before continuing with the execution…
WaitMilliseconds 500

WaitSeconds
Pauses the execution of the current script for a number of seconds.

Syntax
WaitSeconds Seconds

Parameters
* Seconds — Integer. Number of seconds to pause the execution of the current script.

Example
// Waits for 5 seconds before continuing with the execution…
WaitSeconds 5


WaitMinutes
Pauses the execution of the current script for a number of minutes.

Syntax
WaitMinutes Minutes

Parameters
* Minutes — Integer. Number of minutes to pause the execution of the current script.

Example
// Waits for 5 minutes before continuing with the execution…
WaitMinutes 5


AnimateExecution
Sets a pause for a number of milliseconds after the execution of every statement.

Syntax
AnimateExecution MilliSeconds

Parameters
* MilliSeconds — Integer. Time in milliseconds that the execution will be paused before the execution of the next statement.

Example
//Set a pause of 1000 ms between each two of the following lines.
AnimateExecution 1000
CreateFile "C:\Users\Username\Documents\Enterprise\MyLog.txt"
WaitForFile "C:\Users\Username\Documents\Enterprise\MyLog.txt"
WaitMinutes 1
StopScript


CompareStrings
Compares two strings with comparing parameter and logs an error message if not true. If the values are empty string, they are considered the same value.

Syntax
CompareStrings TextString1 TextString2	<Operator>

Parameters
* TextString1 — Variable name, data file column name, or a string value. One element to be compared.
* TextString2 — Variable name, data file column name, or a string value. The second element to be compared.
* Operator –it is optional. The default is ‘==’ if not specified. Constant value. < == | != | <> | in | notin >. 
Examples
// set two variables and compare their values
SetVariable V.ESN1 “ABC0001”
SetVariable V.ESN2 “ABC0002”
// this will log an error
CompareStrings V.ESN1 V.ESN2

// compares a variable and a data file column
CompareStrings V.ESN1 DCESN3

// compares a variable and a string value
CompareStrings V.ESN1 “ABC0003”

// compares two empty strings
SetVariable V.EmptyString “”
CompareStrings V.EmptyString “”

CompareStrings "same" "same" "=="  //true
CompareStrings "same1" "same" "!=" //true

CompareStrings "same" "same" "<>" //false

CompareStrings "cde" "abcdefg" "in" //true

CompareStrings "cde" "abcdefg" "notin"//false



VerifyTextFileLine
Search specific strings in specific lines of text files

Syntax
VerifyTextFileLine Filename LineNumber Operator Text

Parameters
* Filename - Full path of the text file. Variable name, data file column name, or a string value
* LineNumber - Number of the line to search the text. Index is 1 based. Variable name, data file column name, or a string value
* Operator - Constant value. <Contains | IsEqualTo | StartsWith | EndsWith | DoesNotContain >
* Text - Variable name, data file column name, or a string value

Example
IsWebValueIncluded "SomeDropdownControl" "MyFirstOption" "IsIncluded"
IsWebValueIncluded "SomeOtherControl" "MyLastOption" "IsNotIncluded"



VerifyTextFile
Search specific strings in text files to verify its content

Syntax
VerifyTextFileLine Filename Operator Text

Parameters
* Filename - Full path of the text file. Variable name, data file column name, or a string value
* Operator - Constant value. <Contains | DoesNotContain >
* Text - Variable name, data file column name, or a string value

Example
VerifyTextFileLine "C:\MyTextFile.txt" "Contains" "This could be anywhere in my file!"
VerifyTextFileLine "C:\MyCSVFile.csv" "DoesNotContain" "This should not be in my file!"


SetDateVariable
Create DateTime variables whose values can be manipulated

Syntax
SetDateVariable VariableName Value

Parameters
* VariableName - Name of the int variable. Constant.
* Value - Value to be assigned to the variable. Variable name, data file column name, or a string value

Example
SetDateVariable VEMS.MyDate "2012-02-15 14:10:59.999"
SetDateVariable VEMS.MyDate "2012-02-15"
SetDateVariable VEMS.MyDate "2012-02-15 14:10:59"
SetDateVariable VEMS.MyDate "2012-02-15 14:10"
SetDateVariable VEMS.MyDate "This should be log an error"
SetDateVariable VEMS.MyDate "100" // Error


SetIntegerVariable
Create Integer variables whose values can be manipulated

Syntax
SetIntegerVariable VariableName Value

Parameters
* VariableName - Name of the int variable. Constant.
* Value - Value to be assigned to the variable. It could be a string or an integer. Variable name, data file column name, or a string value

Example
SetIntegerVariable VEMS.MyInt "100"
SetIntegerVariable VEMS.MyInt 100
SetIntegerVariable VEMS.MyInt "String value should generate error"


AddToDateVariable
Scripts can use dates to change information in any application

Syntax
AddToDateVariable VariableName UnitName NumberOfUnits

Parameters
* VariableName - Name of the date variable. Constant.
* UnitName - Constant. <Years | Months | Days | Hours | Minutes | Seconds | Milliseconds>. Variable name, data file column name, or a string value 
* NumberOfUnits - Positive or negative integer. Variable name, data file column name, or a string value

Example
SetDateVariable VEMS.MyDate "%DATETIMENOW%" // date value could be: 2012-02-15 14:20:00.123
AddToDateVariable VEMS.MyDate "Days" 10 // date value is now: 2012-02-25 14:20:00.123
AddToDateVariable VEMS.MyDate "Days" -7 // date value is now: 2012-02-18 14:20:00.123
AddToDateVariable VEMS.MyDate "Days" "5" // date value is now: 2012-02-23 14:20:00.123
SetVariable VEMS.MyChar "%DATETIMENOW%"
AddToDateVariable VEMS.MyChar "Days" 10 // error - the var is not date type


AddToIntegerVariable
Scripts can use dates to change information in any application

Syntax
AddToIntegerVariable VariableName IntegerValue

Parameters
* VariableName - Name of the integer variable. Constant.
* IntegerValue - Amount to be added to the value of the variable. Variable name, data file column name, or a string value

Example
SetIntegerVariable MyInt 3
AddToIntegerVariable MyInt 1 // now the the value is 4
AddToIntegerVariable MyInt "10" // now the the value is 14
AddToIntegerVariable MyInt "-5" // now the the value is 9
AddToIntegerVariable MyInt -1 // now the the value is 8
AddToIntegerVariable MyInt "Something" // error - the value is not integer
SetVariable MyChar "1"
AddToIntegerVariable MyChar 1 // error - the var is not integer
SetDateVariable MyDate "%DATETIMENOW%"
AddToIntegerVariable MyDate 1 // error - the var is not integer


SplitToVariable
Split a given string with a delimiter and store one of the values to a variable.

Syntax
SplitToVariable VariableName OriginalString	Separator	Position

Parameters
* VariableName - Name of the variable. Use to store one of the values after the split.
* OriginalString – The string to split. Variable name, data file column name, or a string value.
* Separator– The delimiter used to split the original string. Variable name, data file column name, or a string value.
* Position– The index of the value to be stored. Variable name, data file column name, or a string value.
* Section—Constant. <Left|Center|Right>. Default is Center.

Example
SplitToVariable      MyVar  "123.456.789" "."           "0"    // 123
SplitToVariable      MyVar  "123,456,789" ","           "1"    // 456
SplitToVariable      MyVar  "123|456|789" "|"           "2"    // 789

SplitToVariable      MyVar  "123,456,789" ","           "1"    Left// 123
SplitToVariable      MyVar  "123|456|789" "|"           "1"    Right//789 


SplitToVariable      MyVar  "123.456.789" "."           "3"    // error
SplitToVariable      MyVar  "123.456.789" "."           "-1"   // 789
SplitToVariable      MyVar  "123.456.789" "."           "-2"   // 123.456


SplitToVariable      MyVar  "123.456.789" ","           "0"    // 123.456.789
SplitToVariable      MyVar  "123.456.789" ","           "1"    // error

SplitToVariable      MyVar  ""            ","           "0"    // skip
SplitToVariable      MyVar  "123.456.789" ""            "0"    // skip
SplitToVariable      MyVar  "123.456.789" ","           ""     // error

SplitToVariable      MyVar  "[null]"      ","           "0"           // skip
SplitToVariable      MyVar  "123.456.789" "[null]"      "0"           // skip
SplitToVariable      MyVar  "123.456.789" ","           "[null]"      // error



SetRandomNumberToVariable
Set random number to a variable between given minimum and maximum values.

Syntax
SetRandomNumberToVariable VariableName MinValue	MaxValue

Parameters
* VariableName - Name of the variable to store the created random number. Variable name, data file column name, or a string value.
* MinValue - Variable name, data file column name, or a string value.
* MaxValue - Positive Variable name, data file column name, or a string value.

Example
SetRandomNumberToVariable  V.MyRandom    1             100
SetRandomNumberToVariable  V.MyRandom    101           1000
SetRandomNumberToVariable  V.MyRandom    1001          10000
SetRandomNumberToVariable  V.MyRandom    10001         100000

SetRandomNumberToVariable  V.MyRandom    "1"           "100"
SetRandomNumberToVariable  V.MyRandom    "101"         "1000"
SetRandomNumberToVariable  V.MyRandom    "1001"        "10000"
SetRandomNumberToVariable  V.MyRandom    "10001"       "100000"
SetRandomStringToVariable
Set a random string to a variable.

Syntax
SetRandomStringToVariable VariableName  MinLength     MaxLength       Type

Parameters
* VariableName - Name of the variable to store the created random number. Variable name, data file column name, or a string value.
* MinLength - Variable name, data file column name, or a string value.
* MaxLength - Positive Variable name, data file column name, or a string value.
* Type—Constand. <AlphaNumeric|Alpha|Numeric>

Example
SetRandomStringToVariable         V.MyVar       50     50     "AlphaNumeric"
SetRandomStringToVariable         V.MyVar       1      50     "AlphaNumeric"
SetRandomStringToVariable         V.MyVar       50     50     "Alpha"
SetRandomStringToVariable         V.MyVar       1      50     "Alpha"
SetRandomStringToVariable         V.MyVar       50     50     "Numeric"
SetRandomStringToVariable         V.MyVar       1      50     "Numeric"

ConvertStrToConcatXPath
Scripts can use to convert an string with ‘ or “ characters to concat(..,..,..) string so that it can work with the XPath string.  If the string doesn’t contain ‘ or “, it will simply return the string itself to the output variable.
For example:
“ABC’CDE” 	-> concat(‘ABC’,”’”,’CDE’)
“ABC” 	-> ‘ABC’
Syntax
ConvertStrToConcatXPath	InputVariableName OutputVariableName
Parameters
* InputVariableName - Name of the variable to store the string to be converted. Variable name, data file column name, or a string value.
* OutputVariableName - Name of the variable to store the converted string. Variable name, data file column name, or a string value.
Example
ConvertStrToConcatXPath		V.NewGroup.Name		V.NewGroup.Name.Converted

ClickWebControl		"%DOUBLESLASH%span[@class='jqtree-title jqtree_common'][.=%V.NewGroup.Name.Converted%]"

ConvertIPDecVarToAddress
Scripts can use to convert an IP decimal value to an IP address.

Syntax
ConvertIPDecVarToAddress   InputVariableName OutputVariableName
Parameters
* InputVariableName - Name of the variable to store the IP decimal number. Variable name, data file column name, or a string value.
* OutputVariableName - Name of the variable to store the converted IP address. Variable name, data file column name, or a string value.

Example
SetVariable               	V.MyIP        "168338800"
ConvertIPDecVarToAddress   	V.MyIP        	V.MyIP        // Now is "10.8.165.112"

ConvertIPAddressVarToDec
Scripts can use to convert an IP address to the decimal value.

Syntax
ConvertIPAddressVarToDec   InputVariableName OutputVariableName
Parameters
* InputVariableName - Name of the variable to store the IP address. Variable name, data file column name, or a string value.
* OutputVariableName - Name of the variable to store the converted IP decimal value. Variable name, data file column name, or a string value.

Example
SetVariable               	V.MyIP        "168338800"
ConvertIPDecVarToAddress   	V.MyIP        V.MyIP        // Now is "10.8.165.112"
ConvertIPAddressVarToDec   	V.MyIP        V.MyIP        // Back to "168338800"










SelectFromListToVariable
Select a value from a list and set it to a variable.

Syntax
SelectFromListToVariable List CurrentValue  Operator Separator VariableName
Parameters
* List – The list of values. Variable name, data file column name, or a string value.
* CurrentValue – The value being used currently. Variable name, data file column name, or a string value.
* Operator—Constants.<Next|Previous|RandomExceptCurrent|Random>
* Separator—The delimiter to separate values in the list.
* VariableName—the name of the variable to be set.

Example
SetVariable  V.MySelection     "Ubuntu"

SelectFromListToVariable   "Windows,Mac,Ubuntu,Some other Linux,"   V.MySelection "Previous"                  ","    V.MySelection

SelectFromListToVariable   "Windows,Mac,Ubuntu,Some other Linux,"   V.MySelection "Next"                      ","    V.MySelection

SelectFromListToVariable   "Windows,Mac,Ubuntu,Some other Linux,"   V.MySelection "Random"                    ","    V.MySelection

SelectFromListToVariable   "Windows,Mac,Ubuntu,Some other Linux,"   V.MySelection       "RandomExceptCurrent"      ","    V.MySelection

StartExecutionTime
Start a timer.

Syntax
StartExecutionTime TimerName
Parameters
* TimerName—the name of the timer.

Example
StartExecutionTime	“Measure1"

StopExecutionTime
Stop a timer and get the execution time.

Syntax
StopExecutionTime TimerName VariableName
Parameters
* TimerName—the name of the timer.
* VariableName—the variable name to store the execution time.

Example
StartExecutionTime         "Measure1"

SetRandomNumberToVariable  V.Time 1      30
WaitSeconds                V.Time
SetRandomNumberToVariable  V.Time 1      30
WaitSeconds                V.Time

StopExecutionTime	“Measure1"   V.Seconds
GetErrorCounter
Get the counter of errors reported by QAPlayer.

Syntax
GetErrorCounter VariableName
Parameters
* VariableName—the variable name to store the error counter.

Example
GetErrorCounter	VariableName

ResetErrorCounter
Reset the counter of errors reported by QAPlayer.
Syntax
ResetErrorCounter 

Example
ResetErrorCounter	VariableName

GetReTryErrorCounter
To get the retry counter and set to a variable.
Syntex
GetReTryErrorCounter VariableName
Parameters
* VariableName—the name of a variable to store the counter.
Example
GetReTryErrorCounter       V.ReTryErrorCounter
StopScriptIf               V.ReTryErrorCounter  ==            "0"
ResetReTryErrorCounter
SetMailServer              DCSMTPServer         DCSMTPPort    DCUsername    DCPassword
SendEmail                  DCFromAddress        DCToAddress   DCSubject     DCContent     DCCC       DCBCC  DCAttachments

ResetReTryErrorCounter
To reset the retry counter.
Syntex
ResetReTryErrorCounter
Example
GetReTryErrorCounter       V.ReTryErrorCounter
StopScriptIf               V.ReTryErrorCounter  ==            "0"
ResetReTryErrorCounter
SetMailServer              DCSMTPServer         DCSMTPPort    DCUsername    DCPassword
SendEmail                  DCFromAddress        DCToAddress   DCSubject     DCContent     DCCC       DCBCC  DCAttachments

SetFileVariable
Create a variable to store a file base64 binary value.

Syntax
SetFileVariable VariableName FilePath

Parameters
* VariableName - Name of the int variable. Constant.
* FilePath – the file path to be converted and assigned to the variable. Variable name, data file column name, or a string value

Example
SetFileVariable      V.MyFile1     "C:\_EnterpriseAutomation\Scripts\SetFileVariable\test.zip" // it should work

SetFileVariable      V.MyFile2     "C:\_EnterpriseAutomation\Scripts\SetFileVariable\error.zip" // files does not exist

SetFileVariable      V.MyFile3     "[null]" // skip

SetFileVariable      V.MyFile3     "" // skip 











SetBinGuidVariable
Create a variable to store a guid’s  base64 binary value.

Syntax
SetBinGuidVariable VariableName Guid

Parameters
* VariableName - Name of the int variable. Constant.
* Guid – the guid to be converted and assigned to the variable. Variable name, data file column name, or a string value

Example
SetBinGuidVariable   V.MyBinGuidVar1      "b5c4eef4-88df-4a59-8f2b-ae8eb56f1c0d"
SetBinGuidVariable   V.MyBinGuidVar2      "[null]"
SetBinGuidVariable   V.MyBinGuidVar3      ""
 
SetGuidVariableFromBin
Create a variable to store a guid converted from BinData.

Syntax
SetGuidVariableFromBin VariableName BinValue

Parameters
* VariableName - Name of the int variable. Constant.
* BinValue – the binrary value to be converted and assigned to the variable. Variable name, data file column name, or a string value

Example
SetGuidVariableFromBin     V.MyGuidVar1      "9O7Etd+IWUqPK66OtW8cDQ=="

SetGuidVariableFromBin     "[null]"             V.MyBinGuidVar1      // skip
SetGuidVariableFromBin     V.MyGuidFromBin1     "[null]"             // skip
SetGuidVariableFromBin     ""                   V.MyBinGuidVar1      // skip
SetGuidVariableFromBin     V.MyGuidFromBin1     ""                   // skip

AddEscapeToVariable
Add escape characters to all quotes in a variable.

Syntax
AddEscapeToVariable VariableName 

Parameters
* VariableName - Name of the int variable. Constant.

Example
SetVariable                V.MyVar       "abc\"123"
AddEscapeToVariable        V.MyVar

CreateArrayVar
Create an array variable. Items can be accessed with standard array syntax. Arrays are 0-indexed.

Syntax
CreateArrayVar VariableName 

Parameters
* VariableName - Name of the array variable. Constant.

Example
CreateArrayVar       V.My.Array
AddToArrayVar        V.My.Array           "a" 
AddToArrayVar        V.My.Array           "b"
SetVariable          V.FirstElement 	V.My.Array[0] // = “a”
//To use variables for the index, surround them with % but no quotes.
SetVariable 	   V.Index 			“1”     
SetVariable          V.SecondElement 	V.My.Array[%V.Index%] // = “b”


AddToArrayVar
Add items to an array variable.

Syntax
AddToArrayVar VariableName ItemValue

Parameters
* VariableName - Name of the array variable. Constant.
* ItemValue—the item to add. Variable name, data file column name, or a string value. Cannot add an array to an array, meaning no nested arrays. 

Example
CreateArrayVar       V.My.Array

AddToArrayVar        V.My.Array           "000-0111-03340"
SetVariable          V.ArrayElements      V.My.Array

AddToArrayVar        V.My.Array           "111-2111-03340"
SetVariable          V.ArrayElements      V.My.Array

CreateJsonDoc        V.My.JsonDoc         "{ Devices : %V.My.Array% }"

SetVariable          V.ArrayElements      V.My.Array
SetVariable          V.ArrayElement0      V.My.Array[0]
SetVariable          V.ArrayElement1      V.My.Array[1]

RemoveFromArrayVarByIndex

Remove an item from an array variable by its index.

Syntax
RemoveFromArrayVarByIndex VariableName ItemIndex

Parameters
* VariableName - Name of the array variable. Constant.
* ItemIndex—the  index of the item to remove. Variable name, data file column name, or a string value.

Example
CreateArrayVar       V.My.Array

AddToArrayVar        V.My.Array           "000-0111-03340"
SetVariable          V.ArrayElements      V.My.Array

AddToArrayVar        V.My.Array           "111-2111-03340"
RemoveFromArrayVarByIndex    V.My.Array		“1”


DeleteArrayVar
Delete an array variable.

Syntax
DeleteArrayVar VariableName 

Parameters
* VariableName - Name of the array variable. Constant.

Example
CreateArrayVar       V.My.Array

DeleteArrayVar       V.My.Array
GetArrayVarCount
Count the number of items in an array variable

Syntax
GetArrayVarCount	ArrayVariableName		ResultVariableName
Parameters
* ArrayVariableName - Name of the array variable. Constant.
* ResultVariableName – Name of the variable to store the returned number of items from the array

Example
GetArrayVarCount	V.ResultList	V.NumOfResult 

CompareArrays
Compare two arrays element with order and value.

Syntax
CompareArrays ArrayVariableName1 ArrayVariableName2

Parameters
* VariableName1 - Name of the array variable. Constant.
* VariableName2 - Name of the array variable. Constant.

Example
CompareArrays       “V.My.Array1”	“V.My.Array2”

StringMethods
Various string methods

Syntax
StringMethods 	Method	String	Parameters
Parameters
* Method – Name of the string method to execute. Methods currently supported are StrLen, IndexOf, and SubString.
* String – The original string
* Parameters – Varies depending on the value of the Method parameter.
o StrLen [String] [VarName] – Sets the variable specified by the VarName parameter to the length of the string.
o IndexOf  [String]  [SubString]  [VarName] – Sets the VarName to the index of the first occurance of Substring. 
o SubString [String]  [Start]  [Length] [VarName] – Sets the variable VarName to the the substring specified by Start and Length parameters.
Example

StringMethods	“StrLen” 		“V.Length”

StringMethods	“SubString”		“Hello world”	“7”	“5”	“V.WorldString”

StringMethods	“IndexOf”		“Hello world”	“world”	“V.WorldIndex”

StringMethods	“Split”		“[\“133\”, \“1345\”]”	“,”	“V.ArrayVar”

ConvertDateStrToDateTimeVar
Convert the standard date string to variables – Year, Month, Day, Hour, Minute, Second, Day of week

Syntax
ConvertDateStrToDateTimeVar	DateString	TimeZone	YearVar	MonthVar	DayVar	HourVar	MinuteVar	SecondVar	DayOfWeekVar
Parameters
* DateString – The date string that you want to convert
* TimeZone – The timezone that you want the date string to be converted to.  (e.g UTC)
* YearVar, MonthVar, DayVar, HourVar, MinuteVar, SecondVar, DayOfWeekVar – the name of the variable that you want to save for the value of Year, Month, Day, Hour, Minute, Second, DayOfWeek respectively
Example

ConvertDateStrToDateTimeVar	V.DateTime	"UTC"	V.Year	V.Month	V.Day	V.Hour	V.Minute	V.Second	V.DayOfWeek


ConvertUnixTimeStempToDateTimeVar
Convert the unix date string to variables.

Syntax
ConvertUnixTimeStampToDateTimeVar	UnixDateString	VariableName	Format
Parameters
* UnixDateString – The date string that you want to convert
* VarialbeName – The variable name for the string after convered.
* Format – The date time format that you want.
Example

ConvertUnixTimeStampToDateTimeVar	"1371166824"			"V.VariableName"		"dddd dd MMMM yyyy"




UI Automation Framework Syntax
The statements or commands in this section allow us to test windows applications by using the Microsoft UI Automation Framework. In order to facilitate the scripting tasks we also need to use the UISpy.exe tool to identify UI IDs.

GetWindow
Gets a window’s user interface ID so all input can be redirected to it. Only for window from Windows applications.

Syntax
GetWindow WindowName [Seconds]

Parameters
* WindowName — Variable name, data file column name, or a string value. This is the title or caption of the window
o It could be the partial text in the title.
* Seconds — Integer. Number of minutes to wait before an error message is created if the window is not present. If not specify, the default value is 60 seconds.

Example
// Executes the Enterprise Wizard
ExecuteProgram Continue "C:\EnterpriseBuild\EnterpriseWizard.exe"
// Sets the window “Computrace® Enterprise Install” as active window
// Give the window 2 minutes to appear or log an error
GetWindow “Computrace® Enterprise Install” 2


MaximizeWindow
Maximizes the window obtained in the previous GetWindow statement.

Syntax
MaximizeWindow

Example
ExecuteProgram Continue "C:\EnterpriseBuild\EnterpriseWizard.exe"
GetWindow “Computrace® Enterprise Install” 2
MaximizeWindow


MinimizeWindow
Minimizes the window obtained in the previous GetWindow statement.

Syntax
MinimizeWindow

Example
ExecuteProgram Continue "C:\EnterpriseBuild\EnterpriseWizard.exe"
GetWindow “Computrace® Enterprise Install” 2
MinimizeWindow


RestoreWindow
Restores the window obtained in the previous GetWindow statement.

Syntax
RestoreWindow

Example
ExecuteProgram Continue "C:\EnterpriseBuild\EnterpriseWizard.exe"
GetWindow “Computrace® Enterprise Install” 2
RestoreWindow


CloseWindow
Closes the window obtained in the previous GetWindow statement.

Syntax
CloseWindow

Example
ExecuteProgram Continue "C:\EnterpriseBuild\EnterpriseWizard.exe"
GetWindow “Computrace® Enterprise Install” 2
CloseWindow


TypeText 
Input text in textbox.

Syntax
TypeText  ControlData  TextString

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* TextString — Variable name, data file column name, or a string value. The text to be typed into the text box control.

Example
GetWindow “Computrace® Enterprise” 2
// creates a variable with the control name of a text box
SetVariable WzrdMap.PageAdmin.txtPassword “txtAdminPwd”
// Enters the password into a text box control name
TypeText WzrdMap.PageAdmin.txtPassword “MyQAPwd1” 


VerifyText
Verifies if the text displayed in a specific control is the same as expected. Error message will be created if they are different.

Syntax
VerifyText  ControlData  TextString Minutes

Parameters
*  ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.TextString — Variable name, data file column name, or a string value. The expected text string.
* Minutes — Integer. Number of minutes to wait before an error message is logged.

Example
GetWindow “Computrace® Enterprise” 2
// creates a variable with the control name of a text box
SetVariable WzrdMap.PageAdmin.txtPassword “txtAdminPwd”
// Enters the password into a text box control name
TypeText WzrdMap.PageAdmin.txtPassword “MyQAPwd1”
// verifies the entered text is correct
VerifyText WzrdMap.PageAdmin.txtPassword “MyQAPwd1” 1


VerifyHelpText 
Verifies if the text of help message is the same as expected. An error message will be logged if they are different.

Syntax
VerifyHelpText  ControlData  TextString Minutes

Parameters
*  ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* TextString — Variable name, data file column name, or a string value. The expected text.
* Minutes — Integer. Number in minutes to wait before the error message is logged if the text is different.

Example 
// creates a variable with the name of a text help ref
SetVariable WzrdMap.PageConfValTests.LblIIS "imgIISTestResult"
// verifies if the help text matches any of the expected values
VerifyHelpText WzrdMap.PageConfValTests.LblIIS "Pending,Passed" 1


ClickControl
Clicks a control with specific text in the current window (set by a GetWindow statement).

Syntax
ClickControl ControlText Seconds

Parameters
* ControlText — Variable name, data file column name, or a string value. Text displayed in the control. Note: This is the caption or text of the button.
* Seconds — Integer. Number in seconds of the time to wait before an error message is logged if the button control is not present or enabled in the window.

Example
GetWindow “Computrace® Enterprise Install” 2
// clicks controls that have specific text
ClickControl "button1"
ClickControl "Second Tab"
ClickControl "checkBox1"
ClickControl "radioButton1"


ClickButton
Clicks a regular button in the current window (set by a GetWindow statement).

Syntax
ClickButton  ControlData  Seconds

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* Seconds — Integer. Number in seconds of the time to wait before an error message is logged if the button control is not present or enabled in the window.

Example
GetWindow “Computrace® Enterprise Install” 2
// creates a variable with the name of a regular button control
SetVariable WzrdMap.ButtonPanel.BtnNext "btnNext"
// Clicks the button control name “btnNext” in the window
ClickButton WzrdMap.ButtonPanel.BtnNext


CheckBox
Selects or de-selects a check box.

Syntax
CheckBox  ControlData  (1 | 0)

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* 1 | 0 — Set to 1 if you want to select the control, set to 0 if you want to de-select the control.

Example 
GetWindow “Computrace® Enterprise”
// creates variables for the check boxes in deployment options page
SetVariable WzrdMap.PageDepOptions.ChBxDatabase "chkDatabaseServerRole"
SetVariable WzrdMap.PageDepOptions.ChBxGuardian "chkGuardianServerRole"
SetVariable WzrdMap.PageDepOptions.ChBxPrivWeb "chkPrivateWebServerRole"
SetVariable WzrdMap.PageDepOptions.ChBxPubWeb "chkPublicWebServerRole"
// check the DB server check box
CheckBox WzrdMap.PageDepOptions.ChBxDatabase 1
// uncheck the guardian, private, and public servers check boxes
CheckBox WzrdMap.PageDepOptions.ChBxGuardian 0
CheckBox WzrdMap.PageDepOptions.ChBxPrivWeb 0
CheckBox WzrdMap.PageDepOptions.ChBxPubWeb 0


VerifyCheckBox
Verifies the status of a check box against an expected value.

Syntax
VerifyCheckBox  ControlData  (1 | 0)

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* 1 | 0 — Set to 1 if you expect the value to be On, set to 0 if you expect the value to be Off.

Example 


ClickRadio
Clicks a radio button in the current window (set by a GetWindow statement).

Syntax
ClickRadio ControlData

Parameters
*  ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.

Example
GetWindow “Computrace® Enterprise Install” 2
SetVariable WzrdMap.ButtonPanel.BtnNext "btnNext"
// creates a variable with the name of a radio button control
SetVariable WzrdMap.AgreementPage.RBtnAccept "rbtnAccept"
// Clicks the button control name “rbtnAccept” in the window
ClickRadio WzrdMap.AgreementPage.RBtnAccept
ClickButton WzrdMap.ButtonPanel.BtnNext


VerifyRadio
Verifies the status of a radio button against an expected value.

Syntax
VerifyRadio  ControlData  (1 | 0)

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* 1 | 0 — Set to 1 if you expect the value to be On, set to 0 if you expect the value to be Off.

Example 


ClickItem
Clicks an item from a list in the current window (set by a GetWindow statement).

Syntax
ClickItem  ControlData  ItemText

Parameters
*  ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* ItemText — Variable name, data file column name, or a string value. Text or caption of the item in the list. Note: this is not the control name of the item.

Example 
GetWindow “Computrace® Enterprise Install” 2
// creates a variable with the control name of a list SQL instances
SetVariable WzrdMap.LstSQLInstances “lvwSQLInstance”
// clicks an option from the install drives list
ClickItem WzrdMap.LstSQLInstances “MyServerName”


VerifyItem
Verifies the selected item of a list in the current window.

Syntax
VerifyItem ControlData ItemText

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* ItemText — Variable name, data file column name, or a string value. Text or caption of the expected item in the list. Note: this is not the control name of the item.




Example 


ClickCombo
Clicks an option of a combo box control in the current window (set by a GetWindow statement).

Syntax
ClickCombo  ControlData  ItemText

Parameters
*  ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* ItemText — Variable name, data file column name, or a string value. Text or caption of the item in the list. Note: this is not the control name of the item.

Example 
GetWindow “Computrace® Enterprise Install” 2
// creates a variable with the control name of a list of drives to install
SetVariable WzrdMap.CboInstallDrives “cboInstallDrives”
// clicks an option from the install drives list
ClickItem WzrdMap.CboInstallDrives “C:\”


RightClickMenuOption
Click mouse right button and select a subitem in the menu.

Syntax
RightClickMenuOption MenuControlName MenuOptionName Seconds

Parameters
* MenuControlName — The name of menu by right clicking. Variable name, data file column name, or a string value. 
* MenuOptionName— The name of option in the menu. Variable name, data file column name, or a string value. 
* Seconds — Integer. Number in seconds of the time to wait before an error message is logged if the button control is not present or enabled in the window.

Example
GetWindow “Computrace® Enterprise Install” 2
// Right click mouse and select a menu option.
RightClickMenuOption "Menu" “Copy” 3

VerifyControlProperty
Verifies the property value of a control in the current window.

Syntax
VerifyControlProperty ControlData PropertyName  Operator  ComparisonValue  VariableName WaitSeconds

Parameters
* ControlData —  Variable name, data file column name, or a string value. 
o ControlData is AutomationId or the combination of three other control properties, Class, Name, and Type. Pleaes see Appendix for details.
* PropertyName — Variable Constants. < IsEnabled|IsKeyboardFocusable|HasKeyboardFocus>
* Operator—Constants. < DoNotCompare|==|<>|!=>
* ComparisonValue—Constants.<true|false>
* WariableName-- Variable name, data file column name, or a string value. Used to store the property value.
* WaitSeconds—Integer. 
Example
GetWindow                  "Training Course Windows App"

// No comparison, assign the value to a var, do not wait
VerifyControlProperty      "btnDoSomething"     "IsEnabled"                "DoNotCompare"       ""       V.PropertyValue      0
VerifyControlProperty      "btnDoSomething"     "IsKeyboardFocusable"      "DoNotCompare"       ""       V.PropertyValue      0
VerifyControlProperty      "btnDoSomething"     "HasKeyboardFocus"         "DoNotCompare"       ""       V.PropertyValue      0

// No comparison, do not assign the value to a var, do not wait
VerifyControlProperty      "btnDoSomething"     "IsEnabled"                "DoNotCompare"       ""       ""     0
VerifyControlProperty      "btnDoSomething"     "IsKeyboardFocusable"      "DoNotCompare"       ""       ""     0
VerifyControlProperty      "btnDoSomething"     "HasKeyboardFocus"         "DoNotCompare"       ""       ""     0

// Compare the value, assign the value to a var, do not wait
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "=="   "true"        V.PropertyValue       0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "=="   "false"       V.PropertyValue       0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "!="   "true"        V.PropertyValue       0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "!="   "false"       V.PropertyValue       0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "<>"   "true"        V.PropertyValue       0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "<>"   "false"       V.PropertyValue       0

// Compare the value, do not assign the value to a var, do not wait
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "=="   "true"        ""     0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "=="   "false"       ""     0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "!="   "true"        ""     0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "!="   "false"       ""     0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "<>"   "true"        ""     0
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "<>"   "false"       ""     0

// Compare the value, assign the value to a var, wait if the value is not as expected
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "=="   "true"        V.PropertyValue       5
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "=="   "false"       V.PropertyValue       5
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "!="   "true"        V.PropertyValue       5
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "!="   "false"       V.PropertyValue       5
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "<>"   "true"        V.PropertyValue       5
VerifyControlProperty      "btnDoSomething"     "IsEnabled"   "<>"   "false"       V.PropertyValue       5

Reflection Syntax
The statements or commands in this section allow us execute automation tests developed with Selenium or NUnit. Although the intention is to execute other automation efforts, any other .NET programs can be executed.

LoadDll
Specifies a dll file to be used in future ExecuteMethod statements.

Syntax
LoadDll DllFileName

Parameters
* DllFileName — Variable name, data file column name, or a string value. Name of the dll file to be loaded.

Example 
// references to a dll file
LoadDDL "C:\Users\Enterprise\MySeleniumTRMSTest.dll"
// executes a method name in the previously specified dll
ExecuteMethod TRMS.CreateTheftReport


ExecuteMethod
Execute a method from a dll file previously specified. If the return type of the called method is string and the returned value has the format: “bool;msg”, An error will be logged if the boolean value is false. Either way, the msg will be logged. If the return type is not string, the raw value returned by the method will be logged.

Syntax
ExecuteMethod NamespaceName.ClassName.MethodName [Repetitions [DataFileName StartingRow ParameterList]]

Parameters
* NamespaceName – Constant value. Name of the namespace defined in the dll file.
* ClassName — Constant value. Name of class defined in the dll file.
* MethodName — Constant value. Name of the method to be executed.
* Repetitions — Integer. Optional parameter. Number of times the script will be executed.
* DataFileName — Constant value. Optional parameter. Name of the data file without extension.
* StartingRow — Integer. This parameter has to be provided if the DataFileName parameter is present. This is the number of the first data row to be fetched by the data file. If the repetitions parameter is more than 1, the subsequent(s) rows will be used.
* ParameterList — Constant values separated by spaces. A parameter list with data file column names has to be provided if the DataFileName parameter is present.

Example 
// reference to a dll file to be used
LoadDDL "C:\Users\Enterprise\MySeleniumTRMSTest.dll"
// executes the TRMS.Login method one time uses the second row in DF
ExecuteMethod TRMS.Login 1 UsersDataFile 2 UserName Password




Hyper-V PowerShell Syntax
The statements or commands in this section allow us to manipulate VMs in order to execute tests.

ConnectToVMServer
Specifies the Server that manages the Hyper-V VMs to be used.

Syntax
ConnectToVMServer VMServer

Parameters
* VMServer — Variable name, data file column name, or a string value. Name of the server. If this is not specified the VM could not be used.

Example 
// specifies the hyper-v server
ConnectToVMServer “hq1itscvmm1.absolute.com”
// Starts the E63MV1SN VM
StartVM “E63MV1SN” 1


StartVM
Starts a VM and waits for the specified amount of time before continuing the execution.

Syntax
StartVM VMName Minutes

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.
* Minutes — Integer. Number of minutes to wait before proceeding with the script execution.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
// creates a variable with 
SetVariable myVM “E63MV1SN”
// Starts the VM and waits a minute
// the VM is managed by the hq1itscvmm1.absolute.com server
StartVM myVM 1


ShutdownVM
Shuts down a VM in a normal way.

Syntax
ShutdownVM VMName

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
SetVariable myVM “E63MV1SN”
StartVM myVM 1
// shuts down a VM
ShutdownVM myVM


StopVM
Powers off the VM. This is the equivalent to disconnecting the power cable from a non virtual machine.

Syntax
StopVM VMName

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
SetVariable myVM “E63MV1SN”
StartVM myVM 1
// powers off a VM
StopVM MyVM


RestoreFirstVMSnapshot
Restores the first snapshot of the VM.

Syntax
RestoreFirstVMSnapshot VMName

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
SetVariable myVM “E63MV1SN”
// Restore to the first snapshot of the VM
RestoreFirstVMSnapshot myVM
StartVM myVM 1


CreateVMSnapshot
Creates a snapshot for the VM.

Syntax
CreateVMSnapshot VMName SnapshotName

Description

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.
* SnapshotName — Variable name, data file column name, or a string value. Name of the Snapshot or Checkpoint to be created.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
SetVariable myVM “E63MV1SN”
// creates a variable with the name of my snapshot
SetVariable mySnapshot “Monday State”
StartVM myVM 1
… do stuff…
ShutdownVM myVM
// creates my snapshot
CreateVMSnapshot myVM mySnapshot


RestoreVMSnapshot
Restores the VM to a specific snapshot.

Syntax
RestoreVMSnapshot VMName SnapshotName

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.
* SnapshotName — Variable name, data file column name, or a string value. Name of the Snapshot or Checkpoint to be created.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
SetVariable myVM “E63MV1SN”
SetVariable mySnapshot “Monday State”
StartVM myVM 1
… do stuff…
ShutdownVM myVM
CreateVMSnapshot myVM mySnapshot
// restores the snapshot we just created
RestoreVMSnapshot myVM mySnapshot


DeleteVMSnapshot
Deletes a specific snapshot.

Syntax
DeleteVMSnapshot VMName SnapshotName

Parameters
* VMName — Variable name, data file column name, or a string value. Name of VM. This is not the Machine Name.
* SnapshotName — Variable name, data file column name, or a string value. Name of the Snapshot or Checkpoint to be created.

Example 
ConnectToVMServer “hq1itscvmm1.absolute.com”
SetVariable myVM “E63MV1SN”
SetVariable mySnapshot “Monday State”
StartVM myVM 1
… do stuff…
ShutdownVM myVM
CreateVMSnapshot myVM mySnapshot
// deletes the snapshot we just created
DeleteVMSnapshot myVM mySnapshot




Web UI Syntax
The statements or commands in this section allow us to test web applications by using Selenium and WebDriver. In order to facilitate the scripting tasks we also need to use the selenium ide add-on to identify UI IDs (control names).

Before we start: How do you search a web control in QA Player?
The most challenging part of automation testing is to identify and tell the scripts the control that you want to accss.  A mechanism has been implemented to assist in uniquely identifying the web controls by providing some information that you can find from the HTML sources.  The following table describes the five main categories 

TypesQA Player scripting samplesHTML samplesXPathCompareWebText		"%DOUBLESLASH%div[@class='mainTitleMain']"	"Show all Devices where ..."<div class="pageTitleMain">View and Manage Users</div>CSSCompareWebText		"css=div[class='mainFormTopTitle']"	"Show all Devices where ..."

ClickWebControl		"css=div[class='accordionHeaderLevel2'] input[name='abc_link']"
<div class="mainFormTopTitle">Show all Devices where ...   </div>

<div class="accordionHeaderLevel2">
   Account Management
   <input name="abc_link" type="hidden" value="https://dv2corp3cc.absolute.com/Pages/">
</div>LinkClickWebControl    "link= Absolute Software "<a href="http://www.absolute.com">Absolute Software Corporation</a>NameClickWebControl    "name=abc_button"<input type="submit" name="abc_button" value="Show results" id="abc123" class="buttonShowResults">IDClickWebControl    "abc123"<input type="submit" name="abc_button" value="Show results" id="abc123" class="buttonShowResults">
StartWebEngine
Starts web browser. (Internet Explorer and Firefox only)

Syntax
StartWebEngine WebBrowser

Parameters
* WebBrowser — Variable name, data file column name, or a string value. The only allowed values are “InternetExplorer” and “FireFox”.

Example
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"


StopWebEngine
Close the browser.

Syntax
StopWebEngine

Example 
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// closes the browser
StopWebEngine


OpenWebUrl 
Opens a specific URL.

Syntax
OpenWebUrl Url

Parameters
* Url — Variable name, data file column name, or a string value. The Url of the web application to open.

Example
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
StopWebEngine


TypeWebText 
Enters a string text in textbox.

Syntax
TypeWebText ControlName TextString

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the text box control in the web page.
* TextString — Variable name, data file column name, or a string value. Text to be entered in the text box.

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// enters the user name in the login page
TypeWebText "username" "Administrator"
// enters the password in the login page
TypeWebText "password" "abc123abc"


ClickWebControl
Clicks a web control button.
Syntax
ClickWebControl ControlName

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the button (or any clickable) control in the web page.
How to click on a hidden control? 
There are some links that are wrapped by a general <div> class and the actual URL is in the hidden <input> inside the div tag.  In this scenario, QA Player is not able to easily identify the <div> class as well as it cannot simply click the <input> control directly because <input> is hidden.  

For example, all left-hand menu items in CC are using <div class=”accordionHeaderLevel2”>….</div>.  In this case, you need to use the xpath or css to identify the hidden <input>.  Then QA Player will check if it is hidden and its value contains “http”.  If so, then it will go to the url specified in the value.  
QA Player Script
ClickWebControl	"css=input[name='ctl00$ctl00$AccordionMenu2$ctl05$ctl16$ctl00']"

HTML Source
<div class="accordionHeaderLevel2">
       Account Management
       <input name="ctl00$ctl00$AccordionMenu2$ctl05$ctl16$ctl00" type="hidden" value="https://dv2corp3cc.absolute.com/Pages/SectionNavMenu.aspx?param=Account Management|true">
</div>

Other Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
TypeWebText "password" "abc123abc"
// clicks the login button
ClickWebControl "LoginButton"


ClickWebLink
Clicks a web link.

Syntax
ClickWebLink LinkText

Parameters
* LinkText — Variable name, data file column name, or a string value. Text of the link in the web page.

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
TypeWebText "password" "abc123abc"
ClickWebControl "LoginButton"
// clicks "Select A Device" link from the main menu
ClickWebLink "Select A Device"


SubmitWebForm
Submits a web form. This is a special case of clicking a web button, sometimes a web page requires to be submitted.

Syntax
SubmitWebForm ControlName 

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the button control in the web page.

Example 
TBD


SelectWebValue
Selects a value or multiple values from a drop down list control in a web page. To be able to select more than one value, the control parameter must contain an XPath value.

Syntax
SelectWebValue ControlName Value 

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the drop down list contron in the web page.
* Value — Variable name, data file column name, or a string value. Text of the element to be selected in the list. If multiple values, separated by “|”. 

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
TypeWebText "password" "abc123abc"
ClickWebControl "LoginButton"
ClickWebLink "View or Edit Account"

// selects "Evaluation" value in the account type field
SelectWebValue "ctl00_bodyContent_usrEditAccount_ddlAccountType_ddlAccountType" "Evaluation"

//Wait until the value being populated.
SelectWebValue "ctl00_bodyContent_usrEditAccount_ddlAccountType_ddlAccountType" "Evaluation"

//Multiple value example.
OpenWebUrl           "https:%DOUBLESLASH%qacorpcc.absolute.com/Pages/Administration/CreateEditSwPolicy.aspx"

ClickWebControl      "%DOUBLESLASH%input[@id='ctl00_bodyContent_usrEditSoftwarePolicyControl_TabContainer1_tabBanned_btnAddBannedSwPolicy']"

SelectWebValue       "%DOUBLESLASH%select[@id='ctl00_bodyContent_usrEditSoftwarePolicyControl_MsgBoxChooseSWLicencesDlg_SoftwareLicensesAndExeChooser1_lbxPublishers']"                     "ACD Systems"

SelectWebValue       "%DOUBLESLASH%select[@id='ctl00_bodyContent_usrEditSoftwarePolicyControl_MsgBoxChooseSWLicencesDlg_SoftwareLicensesAndExeChooser1_ListSelector1_lbxLeftBox']"              "ImageFox (L)|FotoAngelo (L)"     

GetWebCookieValue
Get the value of a cookie
Syntax
GetWebCookieValue	CookieName VariableName
Parameters
* CookieName- Name of the cookie
* VariableName — The variable to store the value of the cookie
Example
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// Logon
ExecuteScript	NextGen.WebUI.Login	V. LoginRows	NextGen.WebUI.User	V.LoginStartRow

//Get cookie value
GetWebCookieValue	".ASPXAUTH"			V.CookieASPXAUTH
GetWebCookieValue	"ASP.NET_SessionId"		V.CookieASPSessionId

GetWebTitle
Assigns the browser’s title (or caption) to a variable.

Syntax
GetWebTitle VariableName

Parameters
* VariableName — Constant value, user-defined name for the variable.

Example
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// assigns the browser's title to a variable
GetWebTitle V.Title


CompareWebTitle 
Compares the web title with an expected value. An error message will be created if they are different.

Syntax
CompareWebTitle Title	Operator

Parameters
* Title — Variable name, data file column name, or a string value. Expected value of the title.
* Operator—Constant. <Equal|NotEqual>

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// compares the browser's title
CompareWebTitle "ESN Management System"		“Equal”
CompareWebTitle "Wrong ESN Management System"		“NotEqual”


GetWebText 
Assigns the value of text box to a variable.

Syntax
GetWebText ControlName VariableName

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the text box control in the web page.
* VariableName — Constant value, user-defined name for the variable. This is the returned value.

GetWebValue
Assigns the value of a control in the web page to a variable.

Syntax
GetWebValue ControlName VariableName

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the control.
* VariableName — Constant value, user-defined name for the variable. Gets the value of the control.

Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// enters the user name in the login page
TypeWebText "username" "Administrator"
// assigns the value of a control to a var
GetWebValue "username" V.UserName

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
GetWebText "username" V.UserName


CompareWebText 
Compares the value of a text box with an expected value. An error message will be created if they are different. If the values are empty strings, they are considered the same value.
NOTE: The implementation of this statement is identical to CompareWebValue.
Syntax
CompareWebText ControlName ExpectedValue

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the text box control in the web page.
* ExpectedValue — Variable name, data file column name, or a string value. The expected value.

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
GetWebText "username" V.UserName
// compares the value of a text box with an expected value
CompareWebText "username" V.UserName

// compares two empty strings
CompareWebText “username” “”

CompareWebValue 
CompareWebValue compares the value of a control in the web page with an expected value. An error message will be created if they are different. If the values are empty strings, they are considered the same value.
NOTE: The implementation of this statement is identical to CompareWebText.
Syntax
CompareWebText ControlName ExpectedValue

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the text box control in the web page.
* ExpectedValue — Variable name, data file column name, or a string value. The expected value.

Scenarios
TypesDescriptionHTML samplesTextboxQA Player checks if the tag name of the element is <input…> and type is text.  Then the value attribute of the input tag will be returned <input name="abc" type="text" value="365" maxlength="3" id="abc" style="width:30px;">Selection DropdownQA Player checks if the tag name of the element is <select…>.  Then it will get the selected option and return its text<select name="abc" id="abc">
	<option value="0">Any Type</option>
	<option selected="selected" value="iOS">iOS</option>
	<option value="Linux">Linux</option>
</select>Check box / Radio buttonQA Player checks if the tag name of the element is <input…> and type is either radio or checkbox.  Then it will get the checked attribute from the element and return “checked” or “unchecked” based on its status<input id="abc" type="radio" name="abc" value="rdoAnyTimeFilter" checked="checked">

<input id="abc" type="checkbox" name="abc" checked="checked">LabelQA Player checks if the tag name of the element is <span..> or <div…>.  Then it will return the text<div class="pageTitleMain">Asset Report</div>

<span id="abc_label">and the Agent:</span>
Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
GetWebText "username" V.UserName
// compares the value of a text box with an expected value
CompareWebValue "username" V.UserName

// compares two empty strings
CompareWebValue “username” “”

// compares checkbox / radio button
CompareWebValue	“checkbox1”	“checked”
CompareWebValue	“radiobox1”	“unchecked”

GetWebCheckStatus
Assigns the status (“Checked” or “Unchecked”) of a check box to a variable.

Syntax
GetWebCheckStatus ControlName VariableName

Description

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the check box control.
* VariableName — Constant value, user-defined name for the variable. Gets the status of the check box control.

Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// enters the user name in the login page
TypeWebText "username" "Administrator"
// enters the password in the login page
TypeWebText "password" "abc123abc"
// clicks the login button
ClickWebControl "LoginButton"
// clicks "View or Edit Account" link from the main menu
ClickWebLink "View or Edit Account"
// clicks "Manage orders" link
ClickWebLink "Manage orders"
// clicks "Edit order profile" link
ClickWebLink "Edit order profile"
// assigns a flag value to a variable
SetVariable V.EnableATI "ctl00_bodyContent_usrLicense_chkActionFlagsF128"
// assigns the value of check box to a var
GetWebCheckStatus V.EnableATI V.CheckStatus
// disables basic asset tracking
ToggleWebControl V.EnableATI
// assigns the value of check box to a var
GetWebCheckStatus V.EnableATI V.CheckStatus


GetWebSelectedLabel
Assigns the selected value of a drop down list to a variable.

Syntax
GetWebSelectedLabel ControlName VariableName

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the drop down list control in the web page.
* VariableName — Constant value, user-defined name for the variable. Holds the selected value.

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
TypeWebText "password" "abc123abc"
ClickWebControl "LoginButton"
ClickWebLink "View or Edit Account"
// assigns the name of account type DDL control to a var
SetVariable V.DDLAccType "ctl00_bodyContent_usrEditAccount_ddlAccountType_ddlAccountType"
// assigns the selected value in the DDL to a var
GetWebSelectedLabel V.DDLAccType V.AccountType


CompareWebSelectedLabel
Compares the selected value of a drop down list with the expected value. An error message will be created if they are different.

Syntax
CompareWebSelectedLabel ControlName ExpectedValue

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the drop down list control in the web page.
* ExpectedValue — Variable name, data file column name, or a string value. The expected value.

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
TypeWebText "username" "Administrator"
TypeWebText "password" "abc123abc"
ClickWebControl "LoginButton"
ClickWebLink "View or Edit Account"
// assigns the name of account type DDL control to a var
SetVariable V.DDLAccType "ctl00_bodyContent_usrEditAccount_ddlAccountType_ddlAccountType"
// assigns the selected value in the DDL to a var
GetWebSelectedLabel V.DDLAccType V.AccountType
// compares the selected value of a DDL to a var
CompareWebSelectedLabel V.DDLAccType V.AccountType


IsWebValueIncluded
Verifies a specific value option is included in a drop down list even. The verification can use IsIncluded or IsNotIncluded operators. If the condition is not true, an error will be logged.

Syntax
IsWebValueIncluded ControlName Value Operator

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the drop down list control in the web page.
* Value — Variable name, data file column name, or a string value. The value.
* Operator – Constant value. Variable name, data file column name, or a string value. <IsIncluded | IsNotIncluded>.

Examples
IsWebValueIncluded “SomeDropdownControl” “FirstOption” “IsIncluded”
IsWebValueIncluded “SomeDropdownControl” “LastOption” “IsNotIncluded”


RefreshWebPage
Refreshes the current web page.

Syntax
RefreshWebPage

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// refreshes the current web page
RefreshWebPage


FocusWebWindow
Returns the focus to the browser window.

Syntax
FocusWebWindow

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// click other application, then the focus will return to the browser
FocusWebWindow

FocusWebControl
Returns the focus to the control in the current window.

Syntax
FocusWebControl ControlName

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// click other control
ClickWebControl "LoginButton"
//The focus will return to the control
FocusWebWindow “Username”

MaximizeWebWindow
Maximizes the browser window.

Syntax
MaximizeWebWindow

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// maximizes the browser window
MaximizeWebWindow


SelectWebWindow
Activates a different browser window.

Syntax
SelectWebWindow searchString	searchType  TimeOut

Parameters
* searchString — Variable name, data file column name, or a string value. It could be the title or the URL of the browser window to activate
* searchType – Specify the search string you use in this statement: TITLE or URL
* TimeOut—Maximum time out.

Example
// starts the first browser window
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// gets the title of the first browser window
GetWebTitle V.Title
// starts the second browser window
StartWebEngine "FireFox"
// opens CC login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8081"
// selects the first browser window
SelectWebWindow V.Title   “TITLE”	“30”


CloseWebWindow
Closes the current browser window.

Syntax
CloseWebWindow

Example 
StartWebEngine "FireFox"
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
CloseWebWindow


ToggleWebControl
Changes a check box control to a different value, i.e. “on” to “off” and “off” to “on”.
Syntax
ToggleWebControl ControlName

Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the check box control to be clicked.

Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// enters the user name in the login page
TypeWebText "username" "Administrator"
// enters the password in the login page
TypeWebText "password" "abc123abc"
// clicks the login button
ClickWebControl "LoginButton"
// clicks "View or Edit Account" link from the main menu
ClickWebLink "View or Edit Account"
// clicks "Manage orders" link
ClickWebLink "Manage orders"
// clicks "Edit order profile" link
ClickWebLink "Edit order profile"
// assigns a flag value to a variable
SetVariable V.EnableATI "ctl00_bodyContent_usrLicense_chkActionFlagsF128"
// assigns the value of check box to a var
GetWebCheckStatus V.EnableATI V.CheckStatus
// disables basic asset tracking
ToggleWebControl V.EnableATI
// assigns the value of check box to a var
GetWebCheckStatus V.EnableATI V.CheckStatus


WaitForWebPageToLoad
Waits for the web page to complete loading process. Note: do not use it. There is an implicit statement every time a UI control is clicked.

Syntax
WaitForWebPageToLoad MicroSeconds

Parameters
* MicroSeconds — Variable name, data file column name, or a string value. Time to wait.

Example 
TBD





IsWebElementPresent
Verifies if the UI control or element is present on the web page. If not, error message will be created.
Syntax
IsWebElementPresent ControlName [Operator] [TotalSeconds][RefreshSeconds] [VariableName]
Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the UI control to be checked.
* Operator - Constant value. < Present | NotPresent > < PresentNoWait | PresentWaitNoRefresh | PresentWaitRefresh | NotPresentNoWait | NotPresentWaitNoRefresh | NotPresentWaitRefresh>.
* TotalSeconds— Variable name, data file column name, or a string value. The total time to wait until a text string is presented. It is optional in the command.
* RefreshSeconds— Variable name, data file column name, or a string value. The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page. It is optional in the command.
* VariableName—Name of the variable. Use to store the “true” or “false” value after executing this statement. It is optional in the command.
     NOTE: If the VARIABLE is provided in the statement, then “TotalSeconds” and “RefreshSeconds” field   are mandatory and should be specified as a whole number values, but not [null].
Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// verifies if the username control is present
IsWebElementPresent "username"	“Present”
// verifies if the login button control is not present.
IsWebElementPresent "LoginButton"	“NotPresent”
// verifies the login button control with total and refresh seconds.
IsWebElementPresent "LoginButton"	“NotPresentWaitRefresh” 60	3
//Store the result to V.VARIABLE and do not want to pass/fail the test case 
IsWebElementPresent "LoginButton"	“Present” 60 3 V.VARIABLE

IsWebElementClickable
Verifies if an element is clickable in the web page. If not, error message will be created.

Syntax
IsWebElementClickable ControlName [VariableName] [Operator] [TotalSeconds] [RefreshSeconds]


Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the UI control to be checked.
* VariableName—Name of the variable. Use to store the “true” or “false” value after executing this statement. 
NOTE: If the variable is provided, this statement will always return a Pass status back to QA Player and therefore will not fail the test case.  However, if you want to use this statement to verify a result and to pass/fail the test case, you can specify [null] as the value of VariableName.  Then QA Player will not attempt to store the result in any variable and will just return the result back.  If you are not going to provide Operator, the VariableName will become a complete optional field and you can leave it blank.  See below for the examples of different scenarios.

* Operator— Constant value.< ClickableNoWait | ClickableWaitNoRefresh | ClickableWaitRefresh | NotClickableNoWait | NotClickableWaitNoRefresh | NotClickableWaitRefresh>. It is optional in the command.
* TotalSeconds— Variable name, data file column name, or a string value. The total time to wait until a text string is presented. It is optional in the command.
* RefreshSeconds— Variable name, data file column name, or a string value. The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page. It is optional in the command.


Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"

//Verifies if the element is clickable in the web page and…

//I want to pass/fail the test case and I do not need to use operator
IsWebElementClickable "username"

//I want to pass/fail the test case and I need to use the operator
IsWebElementClickable 	"username"  [null]	"ClickableWaitNoRefresh"          60
IsWebElementClickable 	"username”  [null]	"NotClickableWaitRefresh"         60		5

//Store the result to V.VARIABLE and do not want to pass/fail the test case
IsWebElementClickable 	"username"  V.VARIABLE	"ClickableNoWait"
IsWebElementClickable 	"username"  V.VARIABLE	NotClickableNoWait"

//Store the result to V.ABC and do not want to pass/fail the test case; No operator is required
IsWebElementClickable 	"username”  V.ABC

IsWebElementEditable
Verifies if an element is editable in the web page. If not, error message will be created.

Syntax
IsWebElementEditable ControlName [Operator] [TotalSeconds] [RefreshSeconds] [VariableName]



Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the UI control to be checked.
* Operator— Constant value.< EditableNoWait | EditableWaitNoRefresh | EditableWaitRefresh | NotEditableNoWait | NotEditableWaitNoRefresh | NotEditableWaitRefresh>. It is optional in the command.
* TotalSeconds— Variable name, data file column name, or a string value. The total time to wait until a text string is presented. It is optional in the command.
* RefreshSeconds— Variable name, data file column name, or a string value. The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page. It is optional in the command.
* VariableName—Name of the variable. Use to store the “true” or “false” value after executing this statement. 
     NOTE: If the VARIABLE is provided in the statement, then “TotalSeconds” and “RefreshSeconds” field   are mandatory and should be specified as a whole number values, but not [null].


Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// verifies if the element is editable in the web page
IsWebElementEditable "username"

IsWebElementEditable 	"username"  "EditableNoWait"
IsWebElementEditable 	"username"   NotPresentNoWait"

IsWebElementEditable 	"username"  "EditableWaitNoRefresh"            60
IsWebElementEditable 	"username”  "NotEditableWaitNoRefresh"         60
	
IsWebElementEditable 	"username”  "EditableWaitRefresh"              60            5
IsWebElementEditable 	"username”  "NotEdtiableWaitRefresh"           60            5

//Store the result to V.VARIABLE and do not want to pass/fail the test case 
IsWebElementEditable 	"username”  "EditableWaitRefresh"  60   5  V.VARIABLE

IsWebTextPresent
Verifies if a specific text is shown in the web page. If not, error message will be created.

Syntax
IsWebTextPresent TextString [Operator] [TotalSeconds] [RefreshSeconds] [VariableName]

Parameters
* TextString — Variable name, data file column name, or a string value. The text which is expected to be presented on the page.
* Operator— Constant value.< PresentNoWait | NotPresentNoWait | PresentWaitNoRefresh | NotPresentWaitNoRefresh | PresentWaitRefresh | NotPresentWaitRefresh >. It is optional in the command.
* TotalSeconds— Variable name, data file column name, or a string value. The total time to wait until a text string is presented. It is optional in the command.
* RefreshSeconds— Variable name, data file column name, or a string value. The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page. It is optional in the command.
* VariableName—Name of the variable. Use to store the “true” or “false” value after executing this statement. 
     NOTE: If the VARIABLE is provided in the statement, then “TotalSeconds” and “RefreshSeconds” field   are mandatory and should be specified as a whole number values, but not [null].

Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// verifies if the text is present in the web page without operator and other options.
IsWebTextPresent "ESN Management System Login"

IsWebTextPresent     "Welcome"  "PresentNoWait"
IsWebTextPresent     "Welcome"  "NotPresentNoWait"

IsWebTextPresent     "Welcome"  "PresentWaitNoRefresh"            60
IsWebTextPresent     "Welcome"  "NotPresentWaitNoRefresh"         60

IsWebTextPresent     "Welcome"  "PresentWaitRefresh"              60            5
IsWebTextPresent     "Welcome"  "NotPresentWaitRefresh"           60            5

//Store the result to V.VARIABLE and do not want to pass/fail the test case 
IsWebTextPresent     "Welcome"  "NotPresentWaitRefresh"   60      5   V.VARIABLE

GetWebCell
Assigns the text of a table cell to a variable using XPath.
Syntax
GetWebCell XPath RowNumber Column VariableName

Parameters
* XPath — Variable name, data file column name, or a string value. The XPath to the cell.  The format is “TableXpath|ColumnsXpath|RowsXpath|CellXapth”.  
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx
* RowNumber – Variable name, data file column name, or a string value. Row index, zero based. Consider the header or column names of the table could be the row 0. The value should be an integer.
* Column – Variable name, data file column name, or string value. Column index, zero based, or column name, string based.
* VariableName — Constant value, user-defined name for the variable. Gets the value of the cell.

Example 
SetVariable   V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable   V.Columns     ".%DOUBLESLASH%th"
SetVariable   V.Rows        ".%DOUBLESLASH%tr"
SetVariable   V.Cells       ".%DOUBLESLASH%td"

//Get the data in the second column from the second row.
GetWebCell “%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%" 1 1 myVar
GetWebCell “%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%" 1 “Id” myVar




GetWebCellByRef
Assigns the text of a table cell to a variable. The text assigned to the variable is from a row selected by the value of a specific column in the table.
Syntax
GetWebCellByRef XPath ResultColumn SearchColumn SearchValue VariableName

Parameters
* XPath — Variable name, data file column name, or a string value. The XPath to the cell.  The format is “TableXpath|ColumnsXpath|RowsXpath|CellXapth”.  
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx
* ResultColumn – Variable name, data file column name, or a string value. This is the column name that will contain the result value.
* SearchColumn – Variable name, data file column name, or a string value. This is the column name that will be searched to locate the row that contains the result value.
* SearchValue – Variable name, data file column name, or a string value. This is the value of the SearchColumn that defines the row to select.
* VariableName — Constant value, user-defined name for the variable. Gets the value of the cell.

Example 
SetVariable   V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable   V.Columns     ".%DOUBLESLASH%th"
SetVariable   V.Rows        ".%DOUBLESLASH%tr"
SetVariable   V.Cells       ".%DOUBLESLASH%td"

// Get the ID where the Device Name is QA-DV2CORP2
// This is how the data can be accessed: "Grid Class|Column Name Class|Row Class|Cell Class"
GetWebCellByRef “%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%" "ID" "Device Name" "QA-DV2CORP2" myVar

IsWebValueIncluded
Test if a specific value is contained as option in a dropdown control, even if the value is not selected, so that I can perform verifications in web pages

Syntax
IsWebValueIncluded WebControl Value Operator

Parameters
* ControlName - Name of UI control to be used. Variable name, data file column name, or a string value
* Value - Text of the option in the dropdown control.Variable name, data file column name, or a string value
* Operator - Constant value. < IsIncluded | IsNotIncluded >

Example
IsWebValueIncluded "SomeDropdownControl" "MyFirstOption" "IsIncluded"
IsWebValueIncluded "SomeOtherControl" "MyLastOption" "IsNotIncluded"

SelectWebIndex
Select values in drop down lists by their index value

Syntax
SelectWebIndex ControlName IndexValue

Parameters
* ControlName - Name of the UI control to be used. Variable name, data file column name, or a string value
* IndexValue - Zero based index value of the option to be selected. This value is an integer, it can be a string (double quoted) or a constant. Variable name, data file column name, or a string value

Example
// "SomeDropdownControl" contains the following list: FirstValue, SecondValue, ThirdValue
SelectWebIndex "SomeDropdownControl" "1" // selects SecondValue
SelectWebIndex "SomeDropdownControl" "2" // selects ThirdValue
SelectWebIndex "SomeDropdownControl" "3" // Logs an error

SetWebCheckBox
Select or unselect the status of a check box independently of the current status of the control

Syntax
SetWebCheckBox ControlName StatusValue

Parameters
* ControlName - Name of the UI control to be used. Variable name, data file column name, or a string value
* StatusValue - Value of the check box. < 1 | 0 >. 1 is selected, 0 is unselected. Variable name, data file column name, or a string value

Example
SetWebCheckBox "SomeCheckBoxControl" "1" // sets the status as selected
SetWebCheckBox "SomeCheckBoxControl" "0" // sets the status as unselected


GetWebTextExists
Verify certain string exists or not in the web page and assign the status (True/False) to a variable. 

Syntex
GetWebTextExists TextString VariableName

Parameters
* TextString – the string to be checked. Variable name, data file column name, or a string value
* VariableName — Constant value, user-defined name for the variable. Gets the status.

Example
GetWebTextExists "Device Summary" VCC.PageName 
// Check if the page name exist and assign the status to the variable


GetWebTable
Gets the text from a cell of a table and set it to a variable.

Syntex
GetWebTable TableCellAddress VariableName

Parameters
* TableCellAddress – The cellAddress, tableLocator.row.column, where row and column start at 0, i.e. foo.1.2.
* VariableName — Constant value, user-defined name for the variable. Gets the cell texts.

Example
GetWebTable "table.1.1" VCC.FirstName 

SendWebKeys
Send keys to an input field on a web page. By sending an ignored key (for example “a”), you can use this to “hover” the mouse over an element, useful for triggering certain tooltips.

Syntex
SendWebKeys ControlName Keys

Parameters
* ControlName - Name of the UI control to be used. Variable name, data file column name, or a string value.
* Keys — Variable value, a set of keys.
Example
// Enter "23" in the filter and tab out
SendWebKeys  "%DOUBLESLASH%input[contains(@class, 'txt-search column-search-input')]" "23\t"


DragAndDropWebElement
Drag and drop a web element to an area.

Syntex
DragAndDropWebElement ControlName DroppableArea

Parameters
* ControlName - Name of the UI control to be used. Variable name, data file column name, or a string value.
* DroppableArea -- Name of the droppable area. Variable name, data file column name, or a string value.
Remark
If you want to use this command with FireFox browser you need to go to about:config and change webdriver_enable_native_events setting to false.

Example
DragAndDropWebElement  "%DOUBLESLASH%li[contains(@class, 'ui-draggable')]"           "%DOUBLESLASH%div[contains(@class, 'ui-droppable')]"     
ClickWebCell
Click a web cell by table data and row and column number.

Syntex
ClickWebCell 	TableData     RowNumber     Column

Parameters
* TableData - Requires the format as "TableXPath|ColumnsXPath|RowsXPath|CellsXPath|ControlXPath". 
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx

* RowNumber -- Variable name, data file column name, or a string value.
* Column -- Variable name, data file column name, an integer or a string value.

Example
SetVariable   V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"
SetVariable   V.Columns     ".%DOUBLESLASH%th"
SetVariable   V.Rows        ".%DOUBLESLASH%tr"
SetVariable   V.Cells       ".%DOUBLESLASH%td"
SetVariable   V.Control     ".%DOUBLESLASH%a"

SetWebWaitTime       10     // default is 60

ClickWebCell  "a1"                 "1"    "1"    // error
ClickWebCell  "a1|a2"              "1"    "1"    // error
ClickWebCell  "a1|a2|a3"           "1"    "1"    // error
ClickWebCell  "a1|a2|a3|a4"        "1"    "1"    // error
ClickWebCell  "a1|a2|a3|a4|a5|a6"  "1"    "1"    // error

ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%"        "201"  "Identifier"
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%"        "201"  "0"
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%"        201    "1"
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Columns%|%V.Control%"      0      "1"                  // click the column name to sort the table
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Columns%|%V.Control%"      0      "Identifier"         // click the column name to sort the table
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%"        5      "1"
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%"        10     "1"
ClickWebCell  "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%"        20     "1"


ClickWebCellByRef
Click a web cell by search a value in a table.
Syntex
ClickWebCellByRef 	TableData  ResultColumn  SearchColumn  SearchValue
Parameters
* TableData - Requires the format as "TableXPath|ColumnsXPath|RowsXPath|CellsXPath|ControlXPath".
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx

* ResultColumn -- Variable name, data file column name, or a string value.
* SearchColumn -- Variable name, data file column name, an integer or a string value.
* SearchValue -- Variable name, data file column name, or a string value.

Example
SetVariable   V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"
SetVariable   V.Columns     ".%DOUBLESLASH%th"
SetVariable   V.Rows        ".%DOUBLESLASH%tr"
SetVariable   V.Cells       ".%DOUBLESLASH%td"
SetVariable   V.Control     ".%DOUBLESLASH%a"

ClickWebCellByRef    "%V.Table%"                                                          "b1"   "b2"       "b3"   // error – table data format is not correct
ClickWebCellByRef    "%V.Table%|%V.Columns%"                                             "b1"   "b2"       "b3"   // error – table data format is not correct
ClickWebCellByRef    "%V.Table%|%V.Columns%|%V.Rows%"                                     "b1"   "b2"       "b3"   // error – table data format is not correct
ClickWebCellByRef    "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%"                           "b1"   "b2"       "b3"   // error – table data format is not correct
ClickWebCellByRef    "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%|%V.AAA%"       "b1"   "b2"       "b3"   // error – table data format is not correct

ClickWebCellByRef    "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%" "Identifier"  "Device Name"  "qa-emacs-emac-2"    // it should click 75KAP0353HAA0V070001
ClickWebCellByRef    "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%" "0"           "5"           "qa-emacs-emac-2"    // it should click "View Call History" in row 0
ClickWebCellByRef    "%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%|%V.Control%" "Identifier"  "Device Name"  "qa-emacs-emac-299"  // error, the search value does not exist


SetWebWaitTime
Set the waiting time for executions.

Syntex
SetWebWaitTime	Seconds
Parameters
* Seconds - Requires Variable name, data file column name, or a string value.


GoWebPageBack
Navigate back to the previous web page.
Syntex
GoWebPageBack	Times
Parameters
* Times –  Variable name, data file column name, or a string value. Name of the define variable in the XML file. It defines how many clickings to back the previous web page
Example
GoWebPageBack       //go back the web page right before the current page.
GoWebPageBack 		3 		//go back to the web page by clicking Back button 3 times.


WaitUntilWebTableRowIsDisplayed
Wait until the specific row content shown in a web table.
Syntex
WaitUntilWebTableRowIsDisplayed 	TableData     RowNumber
Parameters
* TableData –  Variable name, data file column name, or a string value. Name of the define variable in the XML file.  The xpath to identify the web table.
* RowNumber –  Variable name, data file column name, or a string value. Name of the define variable in the XML file. 
Example
SetVariable          V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable          V.Columns     ".%DOUBLESLASH%th"
SetVariable          V.Rows        ".%DOUBLESLASH%tr"
SetVariable          V.Cells       ".%DOUBLESLASH%td"
SetVariable          V.Control     ".%DOUBLESLASH%a"

CountWebTableRows                  "%V.Table%|%V.Rows%"        myVariableName       // table not fully created
CountWebTableColumns              "%V.Table%|%V.Columns%"    myVariableName       // table not fully created
WaitUntilWebTableRowIsDisplayed   "%V.Table%|%V.Rows%"       "201"                // valid row number
WaitUntilWebTableRowIsDisplayed   "%V.Table%|%V.Rows%"       "300"                // error, the table only has 202 rows
CountWebTableRows                 "%V.Table%|%V.Rows%"       myVariableName       // table fully created
CountWebTableColumns              "%V.Table%|%V.Columns%"    myVariableName       // table fully created

CountWebTableColumns
Get a web table column count.
Syntex
CountWebTableColumns           TableData     VariableName
Parameters
* TableData –  Variable name, data file column name, or a string value. Name of the define variable in the XML file.  The xpath to identify the web table.
* VariableName –  To store the count. 
Example
SetVariable          V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable          V.Columns     ".%DOUBLESLASH%th"

CountWebTableColumns              "%V.Table%|%V.Columns%"    myVariableName       // table fully created



CountWebTableRows
Get a web table row count.
Syntex
CountWebTableRows           TableData     VariableName
Parameters
* TableData –  Variable name, data file column name, or a string value. Name of the define variable in the XML file.  The xpath to identify the web table.
* VariableName –  To store the count. 
Example
SetVariable          V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable          V.Rows        ".%DOUBLESLASH%tr"

CountWebTableRows                 "%V.Table%|%V.Rows%"       myVariableName       // table fully created

GetWebUrl 
Get the current URL and assign to a variable.

Syntax
GetWebUrl VariableName

Parameters
VariableName — the name of the variable to store the Url.
Example
StartWebEngine       "FireFox"
OpenWebUrl           "http:%DOUBLESLASH%qacorpcc.absolute.com/"
TypeWebText          "username"           "absolute - qa"
TypeWebText          "password"           "password"
ClickWebControl      "LoginButton"

OpenWebUrl           "https:%DOUBLESLASH%qacorpcc.absolute.com/Pages/Administration/ManageUserCreate.aspx"

ClickWebControl      "%DOUBLESLASH%a[@id='ctl00_bodyContent_lnkAccessRightDefinition']"

SelectWebWindow      "CustomerCenterUserGuide.en.pdf (application/pdf Object)"

GetWebUrl            V.MyCurrentUrl

CompareStrings       V.MyCurrentUrl             "https:%DOUBLESLASH%qacorpcc.absolute.com/Documents/GuidesAndTips/CustomerCenterUserGuide.en.pdf#nameddest=AccessRights"


WaitForWebCellValue
Wait until an expected web cell value shown.

Syntax
WaitForWebCellValue XPath RowNumber ColumnNumber Value Operator TotalSeconds RefreshSeconds

Parameters
* XPath — Variable name, data file column name, or a string value. The XPath to the cell.
               The format is “TableXpath|ColumnsXpath|RowsXpath|CellXapth”.
* RowNumber – Variable name, data file column name, or a string value. Row index, zero based. Consider the header or column names of the table could be the row 0. The value should be an integer.
* ColumnNumber – Variable name, data file column name, or string value. Column index, zero based. The value should be an integer.
* Value — the expected value in the cell. Variable name, data file column name, or a string value.
* Operator—Constant. <PresentNoWait|PresentWaitNoRefresh|PresentWaitRefresh|NotPresentNoWait|NotPresentWaitNoRefresh|NotPresentWaitRefresh|Present|NotPreseent>
* TotalSeconds—total wait time.
* RefreshSeconds— The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page.

Example 
SetVariable   V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable   V.Columns     ".%DOUBLESLASH%th"
SetVariable   V.Rows        ".%DOUBLESLASH%tr"
SetVariable   V.Cells       ".%DOUBLESLASH%td"

//Get the data in the second column from the second row.
WaitForWebCellValue “%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%" 1 1 “Dell” PresentWaitRefresh 10 1


WaitForWebCellValueByRef
Wait for expected web cell value shown by reference search.
Syntax
WaitForWebCellValueByRef XPath SearchColumn SearchValue ResultColumn ResultValue Operator TotalSeconds RefreshSeconds
Parameters
* XPath — Variable name, data file column name, or a string value. The XPath to the cell.
               The format is “TableXpath|ColumnsXpath|RowsXpath|CellXapth”.
* SearchColumn – Variable name, data file column name, or a string value. This is the column name that will be searched to locate the row that contains the result value.
* SearchValue – Variable name, data file column name, or a string value. This is the value of the SearchColumn that defines the row to select.
* ResultColumn – Variable name, data file column name, or a string value. This is the column name that will contain the result value.
* ResultValue – Variable name, data file column name, or a string value. This is the expected value.
* Operator—Constant. <PresentNoWait|PresentWaitNoRefresh|PresentWaitRefresh|NotPresentNoWait|NotPresentWaitNoRefresh|NotPresentWaitRefresh|Present|NotPreseent>
* TotalSeconds—total wait time.
* RefreshSeconds— The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page..

Example 
SetVariable   V.Table       "%DOUBLESLASH%table[@id='ctl00_ctl00_bodyContent_resultsContent_gvAssets_gvResults']"

SetVariable   V.Columns     ".%DOUBLESLASH%th"
SetVariable   V.Rows        ".%DOUBLESLASH%tr"
SetVariable   V.Cells       ".%DOUBLESLASH%td"

// Get the ID where the Device Name is QA-DV2CORP2
// This is how the data can be accessed: "Grid Class|Column Name Class|Row Class|Cell Class"
WaitForWebCellValueByRef “%V.Table%|%V.Columns%|%V.Rows%|%V.Cells%" "ID" “182938339” "Device Name" "QA-DV2CORP2" PresentWaitRefresh 10 1

VerifyWebColumnValue
Verify a web cell value by search the column name in a table.
Syntex
VerifyWebColumnValue TableData  Column  Operator  Value NextPageControl CurrentPageControl

Parameters
* TableData - Requires the format as "TableXPath|ColumnsXPath|RowsXPath|CellsXPath|ControlXPath".
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx

* Column -- Variable name, data file column name, or a string value.
* Operator – Constant. <Contains|DoesNotContain|Equal|NotEqual|Empty|NotEmpty>
* Value -- Variable name, data file column name, or a string value.
* NextPageControl—Variable name, xpath to the next page control.
* CurrentPageControl—Varialbe name, xpath to the current page control.
Example

StartWebEngine       "Chrome"
MaximizeWebWindow
OpenWebUrl           "http:%DOUBLESLASH%dv2corp2newcc.absolute.com/login.html"

TypeWebText          "%DOUBLESLASH%input[@class='input-username']"   "swang"
TypeWebText          "%DOUBLESLASH%input[@class='input-password']"   "password"
ClickWebControl      "%DOUBLESLASH%button[@class='btn-login']"
IsWebTextPresent     "swang"                                         "PresentWaitNoRefresh"     20

ClickWebControl      "%DOUBLESLASH%span[contains(.,'Active Devices')]"

VerifyWebColumnValue "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr|.%DOUBLESLASH%td"      "Serial Number"      "Contains"    "VMWARE"

VerifyWebColumnValue "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr[contains(@class,'ui-row-ltr')]|.%DOUBLESLASH%td"    "Identifier"  "Contains"    "WNFLGGAA"

VerifyWebColumnValue "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr[contains(@class,'ui-row-ltr')]|.%DOUBLESLASH%td"    "Identifier"  "Contains"    "WNFLGGAA"    "%DOUBLESLASH%span[@class='report-pager-next icon-arrow-3 btn-small']" "%DOUBLESLASH%input[@class='report-pager-current']"

VerifyWebColumnValue "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr[contains(@class,'ui-row-ltr')]|.%DOUBLESLASH%td"    "Identifier"  "Contains"    "2B"   "%DOUBLESLASH%span[@class='report-pager-next icon-arrow-3 btn-small']" "%DOUBLESLASH%input[@class='report-pager-current']"

VerifyWebColumnValue "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr[contains(@class,'ui-row-ltr')]|.%DOUBLESLASH%td"    "Serial Number"      "Contains"    "VMWARE"

TryNextScriptAgainIfError
Try to execute the failed script again within a time limit and attemps.
Syntex
TryNextScriptAgainIfError Time   Type
Parameters
* Time – Integer.
* Type--Constant.<Minutes|Seconds|Attempts>
Example
TryNextScriptAgainIfError                                            5      "Minutes"     // if the next script fails, it will be executed continuously until passes or for 5 minutes
ExecuteScript  CC.WebUI.Performance.MeasureSilo         1      CC.WebUI.Performance        %CURRENTSCRIPTREPETITION%
// if the script CC.WebUI.Performance.MeasureSilo still fails, a ReTryError will be added, but it will not be logged

TryNextScriptAgainIfError                                            60     "Seconds"     // if the next script fails, it will be executed continuously until passes or for 60 seconds
ExecuteScript  CC.WebUI.Performance.MeasureSilo         1      CC.WebUI.Performance        %CURRENTSCRIPTREPETITION%
// if the script CC.WebUI.Performance.MeasureSilo still fails, a ReTryError will be added, but it will not be logged

TryNextScriptAgainIfError                                            5      "Attempts"    // if the next script fails, it will be executed continuously until passes or 5 attempts
ExecuteScript              CC.WebUI.Performance.MeasureSilo         1      CC.WebUI.Performance        %CURRENTSCRIPTREPETITION%
// if the script CC.WebUI.Performance.MeasureSilo still fails, a ReTryError will be added, but it will not be logged


ClickWebRow
Click a row in a table.
Syntex
ClickWebRow TableData   RowNubmer
Parameters
* TableData - Requires the format as "TableXPath|ColumnsXPath|RowsXPath|CellsXPath|ControlXPath".
* RowNubmer—the number of row to click
Example
SetVariable   V.Table              "%DOUBLESLASH%table[contains(@id, 'bodyContent_cpSearch_searchCriteriaContent_usrDataboundSearchCriteria_ctl02_usrItem_usrFields_usrFieldsFilterModal_ctl01')]"
SetVariable   V.Rows               ".%DOUBLESLASH%tr"

ClickWebRow   "%V.Table%|%V.Rows%" "1"

FindInWebTable
Find a cell value in a table by its column name using current and next page control to search.
Syntex
FindInWebTable TableData  Column  Operator  Value NextPageControl CurrentPageControl
Parameters
* TableData - Requires the format as "TableXPath|ColumnsXPath|RowsXPath|CellsXPath|ControlXPath".
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx

* Column -- Variable name, data file column name, or a string value.
* Operator – Constant. <Contains|DoesNotContain|Equal|NotEqual|Empty|NotEmpty>
* Value -- Variable name, data file column name, or a string value.
* NextPageControl—Variable name, xpath to the next page control.
* CurrentPageControl—Varialbe name, xpath to the current page control.
Example
//Finds the value in the first page
FindInWebTable       "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr|.%DOUBLESLASH%td"      "Identifier"  "Equal"       "2BB2WNFLGGAA00130002"     "%DOUBLESLASH%span[@class='report-pager-next icon-arrow-3 btn-small']"      "%DOUBLESLASH%input[@class='report-pager-current']"

//Finds the value in the last page
FindInWebTable       "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr|.%DOUBLESLASH%td"      "Identifier"  "Equal"       "2BHDJMBPQ3AA000Y0002"     "%DOUBLESLASH%span[@class='report-pager-next icon-arrow-3 btn-small']"      "%DOUBLESLASH%input[@class='report-pager-current']"

//Does not find the value and logs an error
FindInWebTable       "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr|.%DOUBLESLASH%td"      "Identifier"  "Equal"       "AAABBBCCCDDDEEEFFFGG"     "%DOUBLESLASH%span[@class='report-pager-next icon-arrow-3 btn-small']"      "%DOUBLESLASH%input[@class='report-pager-current']"
VerifyWebColumnOrder
To verify the order of the values in one or multiple columns.
Syntex
VerifyWebColumnOrder TableData  Column  OrderDirection DataType  ComparisonType	DateTimeLocale
Parameters
* TableData - Requires the format as "TableXPath|ColumnsXPath|RowsXPath|CellsXPath|ControlXPath".
NOTE: In the case that the header is in a different table, you can include the header table reference in the XPATH using this format: "%V.Table%|%V.HeaderTable%|%V.Columns%|%V.Rows%|%V.Cells%".  For detail, go to http://scm/Practices/Automation/Wiki/Fix%20for%20the%20data%20table%20related%20statements%20for%20NextGen.aspx

* Column -- Variable name, data file column name, or a string value.
* OrderDirection – Constant. <Ascending|Descending>
* DataType -- Variable name, data file column name, or a string value. (Available options: String, DateTime, Numeric)
* ComparisonType—Variable name, data file column name, or a string value (mandatory only if DataType=String)
* DateTimeLocale-Variable name, data file column name, or a string value (mandatory only if DataType=DateTime)
Example

VerifyWebColumnOrder "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr[contains(@class,'ui-row-ltr')]|.%DOUBLESLASH%td"    "Make|Model|Operating System"       "Ascending|Descending|Ascending"  "String|String|String"     "Ordinal|Ordinal|Ordinal"	"[null]|[null]|[null]" 

VerifyWebColumnOrder "%DOUBLESLASH%div[@class='ui-jqgrid-view']|.%DOUBLESLASH%th|.%DOUBLESLASH%tr[contains(@class,'ui-row-ltr')]|.%DOUBLESLASH%td"    "Make|Model|Last Call"       "Ascending|Descending|Ascending"  "String|String|DateTime"       "CaseInsensitive|CaseInsensitive|[null]"	"[null]|[null]|en-CA"

IsWebElementVisible
Verifies if the UI control or element is visible on the web page. If not, error message will be created.

Syntax
IsWebElementVisible ControlName [Operator] [TotalSeconds]  [RefreshSeconds]
Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the UI control to be checked.
* Operator - Constant value. < VisibleNoWait | VisibleWaitNoRefresh | VisibleWaitRefresh | NotVisibleNoWait | NotVisibleWaitNoRefresh | NotVisibleWaitRefresh >
* TotalSeconds— Variable name, data file column name, or a string value. The total time to wait until a text string is presented. It is optional in the command.
* RefreshSeconds— Variable name, data file column name, or a string value. The webpage is refreshed once every RefreshSeconds. The RefreshSeconds counter does not start again until the last refresh has finished loading the page. It is optional in the command.

Example 
// starts the fire fox browser
StartWebEngine "FireFox"
// opens EMS login page in the e63mv1sn enterprise server
OpenWebUrl "http:%DOUBLESLASH%e63mv1sn:8082"
// verifies if the username control is visible
IsWebElementVisible "username"	“Present”
// verifies if the login button control is not visible.
IsWebElementVisible "LoginButton"	“NotPresent”

// verifies the login button control with total and refresh seconds.
IsWebElementVisible "LoginButton"	“NotPresent” 60	3

SetWebProgressElement
Set the web progress element in QAPlayer so that if the element is visible and then the script waits until it dispears.

Syntax
SetWebProgressElement ControlName 
Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the UI control to be checked.
Example 
SetWebProgressElement “webProgress”









GetWebControlsCount
Get the number of web controls matching the given selector, such as the row count in a table.
Note that if no elements match the selector, this statement will wait until such an element appears.

Syntax
GetWebControlsCount ControlName  	VariableName
Parameters
* ControlName — Variable name, data file column name, or a string value. Name of the UI control to be checked.
* VariableName—to store the count value.
Example 
//Gets the number of tr’s in the table #mytable
GetWebControlsCount		“css=table#mytable tr”	"V.Count"

GetWebAttributeValue
Get the attribute value from a web element
Syntax
GetWebAttributeValue	ControlName	AttributeName	VariableName
Parameters
* ControlName – The name of the control that you want to examine its attribute
* AttributeName – The attribute that you want to get the value from
* VariableName – Store the value to this variable
Examples
GetWebAttribute	"ctl00_ctl00_progress_upProgress"	"style"	V.WaitProgressStyle


HandleWebWindowAlert
Handle the alert popup (i.e. Javascript alert dialog) accordingly
Syntax
HandleWebWindowAlert	actionName
Parameters
* actionName – The action – “accept” or “dismiss” that you want to perform to the alert dialog. 
Examples
HandleWebWindowAlert		"accept"
HandleWebWindowAlert		"dismiss"



GetWebSelectElementIndexByAttrValue
Get the index of the item in the <select…> element based on its attribute value
Syntax
GetWebSelectElementIndexByAttrValue	ControlName	AttributeName	AttributeValue 	VariableName
Parameters
* ControlName – The name of the <select> element that you want to examine
* AttributeName – The attribute that you want to use to search for an item
* AttributeValue – The value of the attribute that you want to use to search for an item
* VariableName – Store the value to this variable
Examples
GetWebSelectElementIndexByAttrValue	"%DOUBLESLASH%select[@class='ember-view ember-select column-spec-selector']"	"value"	"agentStatus"		V.value

































XML Syntax
The statements or commands in this section allow us to test the values of the MonitoringCenter.xml file settings.

SetXmlDefine
Creates a define value to be used in the XML verification process.

Syntax
SetXmlDefine Name Value

Parameters
* Name — Variable name, data file column name, or a string value. Name of the define variable in the XML file.
* Value — Variable name, data file column name, or a string value. Value that will be assigned to the define value.

Example 
SetXmlDefine "EnvironmentType" "Customer"
SetXmlDefine "OrpEdition" "EnterpriseCustomer"


SetXmlSettingValue
Creates a setting value to be used in the XML verification process.

Syntax
SetXmlSettingValue Name Value

Parameters
* Name — Variable name, data file column name, or a string value. Name of the setting in the XML file.
* Value — Variable name, data file column name, or a string value. Value that will be assigned to the setting.

Example 
SetXmlSettingValue "WIRELESS_UPSIDE_PUBLISHER_WEBSITE_PORT" "8086"


ExcludeXmlSetting 
Excludes the setting of being considered in the verification process of the XML file.

Syntax
ExcludeXmlSetting Name

Parameters
* Name — Variable name, data file column name, or a string value. Name of the setting being excluded from the verification process.

Example 
ExcludeXmlSetting "DATA_CENTER_MASTER_ACCOUNT_NAME"


VerifyXmlSettings
Verifies the values of the settings contained in the XML file.

Syntax
VerifyXmlSettings TemplateFile MonitoringCenterFile

Parameters
* TemplateName — Variable name, data file column name, or a string value. Name and path of the Monitoring Center Base Template xml file.
* MonitoringCenterFileVariableName — Variable name, data file column name, or a string value. Name and path of the Monitoring Center xml file.

Example 
// assigns the name of the template to a variable
SetVariable V.TemplateXml "C:\MonitoringCenterBaseTemplate.xml"
// assigns the name of the monitoring center xml file to a variable
SetVariable V.MCXml "C:\MonitoringCenter.xml"
// verifies the settings in the monitoring center xml file
VerifyXmlSettings V.TemplateXml V.MCXml


LoadXmlDocFile
Load Xml file into QAPlayer.

Syntax
LoadXmlDocFile FilePath XmlObjectName

Parameters
* FilePath—the xml file path
* XmlObjectName — Variable name, data file column name, or a string value. Name of the setting in the XML file.

Example 
LoadXmlDocFile "C:\_EnterpriseAutomation\Scripts\XmlMongoVer\singRegistryOs.xml"   "MyFileXmlObj"

GetXmlDocElementValue
Get the element value from the xml object.

Syntax
GetXmlDocElementVale XmlObjectName Xpath	VariableName

Parameters
* XmlObjectName — Variable name, data file column name, or a string value. Name of the setting in the XML file.
* Xpath—the Xpath the the element
* VariableName—the variable name to store the value.

Example 
GetXmlDocElementValue      "MyFileXmlObj"       "/sing/@ESN"                      "myVar"
GetXmlDocElementValue      "MyFileXmlObj"       "/sing/Registry/RegOsKey[1]/@name" "myVar"

GetXmlDocNodeCount
Get the Xml node count from the xml object.

Syntax
GetXmlDocNodeCount XmlObjectName Xpath	VariableName

Parameters
* XmlObjectName — Variable name, data file column name, or a string value. Name of the setting in the XML file.
* Xpath—the Xpath the the element
* VariableName—the variable name to store the value.

Example 
GetXmlDocNodeCount         "MyFileXmlObj"       "/sing"                           "myVar"
GetXmlDocNodeCount         "MyFileXmlObj"       "/sing/Registry"                  "myVar"
GetXmlDocNodeCount         "MyFileXmlObj"       "/sing/Registry/RegOsKey"         "myVar"
GetXmlDocNodeCount         "MyFileXmlObj"       "/sing/Registry/RegOsKey/reg"     "myVar"
GetXmlDocNodeCount         "MyFileXmlObj"       "/sing/Registry/RegOsKey[1]/reg"  "myVar"
GetXmlDocNodeCount         "MyFileXmlObj"       "/sing/Registry/RegOsKey[2]/reg"  "myVar"

VerifyXmlDocElementExists
Verify the element value existing from the xml object.

Syntax
VerifyXmlDocElementExists XmlObjectName Xpath	Operator

Parameters
* XmlObjectName — Variable name, data file column name, or a string value. Name of the setting in the XML file.
* Xpath—the Xpath the the element
* Operator—Constant, <Exists | DoesNotExists>.

Example 
VerifyXmlDocElementExists      "MyFileXmlObj"       "/sing/@ESN"                      "Exists"
VerifyXmlDocElementExists      "MyFileXmlObj"       "/sing/Registry/RegOsKey[1]/@name" “DoseNotExists"

VerifyXmlDocElementValue
Verify the element value from the xml object.

Syntax
VerifyXmlDocElementValue XmlObjectName Xpath	Operator  Value

Parameters
* XmlObjectName — Variable name, data file column name, or a string value. Name of the setting in the XML file.
* Xpath—the Xpath the the element
* Operator— Constant name, <Equal | NotEqual|In|NotIn|Contains|DoesNotContain>.
* Value—the expected value.

Example 
VerifyXmlDocElementValue  "MyFileXmlObj"       "/sing/@ESN"             "Egual" 	“2838dsfusdofauf”
VerifyXmlDocElementValue  "MyFileXmlObj"       "/sing/Registry/RegOsKey[1]/@name" “Contains" “System”



GetXmlAttribute
Get the attribute value of a node from the xml file

Syntax
GetXMLAttribute 	XmlPath 	Xpath	AttributeName  VariableName

Parameters
* XmlPath — The path of the xml file
* Xpath—the Xpath the the element
* AttributeName— Name of the attribute 
* VariableName—Name of the variable that you want to save the value of the specified attribute

Example 
GetXMLAttribute	"C:\Temp\zip\unzip\home\ph\ca\agentpackages.xml"	"/AgentPackages/AgentPackage" "scanFrequency"	V.ScanFrequency

DB Syntax
The statements or commands in this section allow us to verify single values against the data base of the system.

OpenDBConnection
Opens a DB connection to the system data base.

Syntax
OpenDBConnection ConnectionString

Parameters
* ConnectionString — Variable name, data file column name, or a string value. Use standard rules for connection strings.

Example 
SetVariable cnn “Data Source=E63MV1SN\Enterprise;Initial Catalog=EnterpriseDB;Integrated Security=SSPI”
OpenDBConnection cnn
CloseDBConnection


VerifyDBValue 
Compares a DB value with an expected value. An error message will be created if they are different.

Syntax
VerifyDBValue Query Value

Parameters
* Query — Variable name, data file column name, or a string value. A select statement that obtains a single value.
* Value — Variable name, data file column name, or a string value. Expected value.

Example 
SetVariable cnn “Data Source=E63MV1SN\Enterprise;Initial Catalog=EnterpriseDB;Integrated Security=SSPI”
OpenDBConnection cnn
SetVariable Query “select count(*) from computer”
VerifyDBValue Query “23”
CloseDBConnection



GetDBValue
Assigns the result of a single value query to a variable.
Syntax
GetDBValue VariableName Query  FormatString
Parameters
* VariableName — Constant value, user-defined name for the variable. Gets the result value query.
* Query — Variable name, data file column name, or a string value. Usually a select statement querying for a single value in the system DB.
* FormatString—Used for date and time format.
Example 
SetVariable cnn “Data Source=E63MV1SN\Enterprise;Initial Catalog=EnterpriseDB;Integrated Security=SSPI”

OpenDBConnection cnn
SetVariable Query “select count(*) from computer”
GetDBValue V.ComputerCounter Query
CloseDBConnection

//get value by passing a date&time format string.
GetDBValue   V.LastCallTime  V.LastCallTimeQuery "yyyy-MM-dd HH:mm:ss.fff"

--V.LastCallTime = "2013-02-13 04:44:53.673"

GetDBValues
Assigns the list of values from a query to an array variable.
Syntax
GetDBValues ArrayVariableName Query  ColumnName

Parameters
* ArrayVariableName — Constant value, user-defined name for the variable. Gets the result value query.
* Query — Variable name, data file column name, or a string value. Usually a select statement querying for values in the system DB.
* ColumnName-The name of the column that you want to get the list from

Example 
SetVariable cnn “Data Source=E63MV1SN\Enterprise;Initial Catalog=EnterpriseDB;Integrated Security=SSPI”
SetVariable	V.Query	"EXEC	CCDATA.dbo.rpt_asset @account_id=%V.AcctID% ,@Status=N'1' ,@DateFilter=-99 ,@DateFromUTC='' ,@DateToUTC='' ,@AgentType=N'0' ,@Version=N'0' ,@Field=0 ,@OrderBy=N'ESN' ,@OrderType=N'' ,@IncludeUDF=1 ,@IncludeDormantDevices=1 ,@RowLimit=0 ,@ESNGroup_ID=0 ,@FilterDepartment=0 ,@DownLoad=0 ,@User_Uid='%V.UserUid%' ,@includeTheftReportingData=1"

CreateArrayVar 	V.ResultList

//Execute the SQL statement and get the result from the column 'ESN'
GetDBValues		V.ResultList	V.Query		"ESN"
CloseDBConnection
Closes the connection to the system DB.

Syntax
CloseDBConnection

Example
SetVariable cnn “Data Source=E63MV1SN\Enterprise;Initial Catalog=EnterpriseDB;Integrated Security=SSPI”
OpenDBConnection cnn
CloseDBConnection



UpdateDB
Update or delete rows in tables from the DB

Syntax
UpdateDB Query
Parameters
* Query - Update or delete query. Variable name, data file column name, or a string value

Example
// Open UserDB first
UpdateDB "Update CommonUser.UserInfo set PwdHash='0xAAB987876AC234DABF00009CC123456' where Email='myUserEmail@absolute.com'"


RunDBScript
Execute a DB script with parameters and structures of result sets.

Syntax
RunDBScript ScriptName ScriptParameters ResultsStructures
Parameters
* ScriptName – The script file name.
* ScriptParameters – The pairs of parameter and value. Use ‘:’ to separate parameter and value. It can be multiple pairs but separated by ‘;’.
o A parameter is a variable in the DB script. It will be substituted by the value when executing the RunDBScript.
o A value can be a real value or a variable which has been defined prior to RunDBScript.
* ResultsStructures – The structure string that indicates how QAPlayer handles the result set from the DB. It is in a pair format and separated by “;”. Similar to ScriptParameters but more complex. Please see the example below to understand the usage.
o Format: ResultSet:Row:ColumnName:QAPlayer_Variable.
o Example: 1:1:Account_ID:V.CreatedAccountID;4:1:CCUserLogin:V.CreatedCCUserLogin

Example
//Example 1
OpenDBConnection        "Data Source=DV2CORP2;Initial Catalog=ctdata;Integrated Security=SSPI;"

//Run DB script named CreateNewAccount.
//Scriptparameters is empty in this case.
//Two pairs of ResultsStructures.
//1. The first pair means to assign the value of the column name ‘Account_ID’ in the first row of // the first ResultSet from DB to V.CreatedAccountID.
//2. The second pair means to assign the value of the column name ‘CCUserLogin’ in the first row of // the forth ResultSet from DB to V.CreatedCCUserLogin.

RunDBScript "CreateNewAccount" "" "1:1:Account_ID:V.CreatedAccountID;4:1:CCUserLogin:V.CreatedCCUserLogin"

CloseDBConnection


//Example 2

//Run DB script named TestParams
//Scriptparameters has one pair.
//1. ‘@miparametro@’ is a parameter in Testparams.
//2. ‘V.MiParametro’ is to replace the ‘@miparametro@’ when executing the script. Thus, the value 
// of ‘V.MiParametro’ will be assigned to ‘@miparametero@’ in the script ‘TestParams’.
RunDBScript "TestParams" "@miparametro@:V.MiParametro" "1:1:MiResultado:V.MiResultado"




RunDBStoredProcedure
Execute a stroed procedure in database with parameters and structures of result sets.

Syntax
RunDBStoredProcedure StoredProcName InParamList InOutParamList OutParamList ResultList 
Parameters
* StoredProcedureName – The stored procedure name.
* InParamList – The pairs of parameter and value. Use ‘:’ to separate parameter and value. It can be multiple pairs but separated by ‘;’.
o A parameter is a variable used by the stored procedure. It will be substituted by the value when executing the RunDBStoredProcedure.
o A value can be a real value or a variable which has been defined prior to RunDBStoredProcedure.
* InOutParamList – The parameter with an intial value and a specified type and a variable name. Use ‘:’ to separate parameter, value, type, and variable name. It can be multiple pairs but separated by ‘;’.
* OutParamList – The parameter and a type and a variable name. Use ‘:’ to separate parameter and value. It can be multiple pairs but separated by ‘;’.
* ResultsList – The structure string that indicates how QAPlayer handles the result set from the DB. It is in a pair format and separated by “;”. Similar to ScriptParameters but more complex. Please see the example below to understand the usage.
o Format: ResultSet:Row:ColumnName:QAPlayer_Variable.
o Example: 1:1:Account_ID:V.CreatedAccountID;4:1:CCUserLogin:V.CreatedCCUserLogin

Example
//RunDBStoredProcedure StoredProcName InParamList InOutParamList OutParamList ResultList
//InParamList = "ParameterName1:Value1;ParameterName2:Value2"
//InOutParamList = "ParameterName1:Value1:Type1:Variable1;ParameterName2:Value2:Type2:Variable2"
//OutParamList = "ParameterName1:Type1:Variable1;ParameterName1:Type1:Variable1"
//ResultList = "ResultSet1:Row1:ColumnName1:Variable1;ResultSet2:Row2:ColumnName2:Variable2"

RunDBStoredProcedure "mySP1"       ""    ""    ""    "1:1:Added:V.Added"

RunDBStoredProcedure "mySP2"       "@AppFunction:Login"  ""  ""     "1:3:ExecutionTime:V.ExecutionTime"

RunDBStoredProcedure "mySP3"       "@AccountType:QA"    ""  "@RetValue:Int:V.MyOutVar" ""
RunDBStoredProcedure "mySP3"       "@AccountType:SL"    ""  "@RetValue:Int:V.MyOutVar" ""

RunDBStoredProcedure "mySP4"       "@AccountType:QA"    ""  "@RetValue:Int:V.MyOutVar" "1:1:ExecutionTime:V.ExecutionTime"

RunDBStoredProcedure "mySP4"       "@AccountType:SL"    ""  "@RetValue:Int:V.MyOutVar" "1:1:ExecutionTime:V.ExecutionTime"

RunDBStoredProcedure "mySP5"       "@AccountID:0"       ""  ""  "1:1:AccountID:V.AccountID"

RunDBStoredProcedure "mySP6"       ""   "@AccountID:0:BigInt:V.AccountID" ""     ""

WaitForDBData
Execute a SQL query in and check the return value within a time limit.

Syntax
WaitForDBData Query Operator Value LimitTime PollingTime 
Parameters
* Query – The SQL query.
* Operator – Equal | NotEqual.
* Value – the return value from the query.
* LimitTime – the total time to execute the query.
* PollingTime – the time frequency to execut the query within the the time limit.

Example
//WaitForDBData Query Operator Value LimitTime PollingTime

WaitForDBData        "select COUNT(*) from dbo.ProdPerf"      "Equal"       "564"  30     1
WaitForDBData        "select COUNT(*) from dbo.ProdPerf"      "NotEqual"    "564"  300    5


MongoDB Syntax
The statements or commands in this section allow us to work with MongoDB.
Special Note for Mongo:
In the Bson document, you need to handle the escape character carefully such as \” and \\ etc.  Unfortunately, QA Player doesn’t handle escape character very well especially when you use multiple SetVariable statements to prepare the Bson string. The escape characters will be messed up completely after passing the string to another variable.  You can use the following guidelines to assist you in the test case preparation.

Double Quote “You need to escape the double quote character (\”).  If you use SetVariable to setup the string first, and then pass to the Mongo statement, you will need to “escape” the escape character as well.  The number of escape characters needed depends on the 
In this example, the ID is setup in the first variable, and then pass this variable to the second variable, and at last we use the second variable in the Mongo insert statement.  As you can see, it involves two SetVariable before getting into the Mongo statement.  In this case, you need to prepare the extra escape (\) twice:
SetVariable			Query.id	"\\\"96483f49-eb26-4716-9db4-e997a6f84b2f\\\""
SetVariable			V.InsertQuery	"{\"_id\" : %Query.id%}"
InsertMongoDBBsonDocuments 	V.Database    	V.Collection  	V.InsertStatementBackslash \Backslash itself is being used as escape character.  Therefore, you will need to escape backslash as well.  However, there is an scenario that you need a backslash next to the double quote.  For example, “C:\\\”.  We cannot simply add extra escape to it because QA Player will get confused by the multiple escape characters.  
In this case, we introduce a new Keyword [!!~~MONGOESCAPEDBACKSLASH~~!!] that you can use in the test case.  QA Player will convert it to \\ before it gets passed to the Mongo statement.  For example:
SetVariable			Query.Drive	"\\\"A:[!!~~MONGOESCAPEDBACKSLASH~~!!]\\\""
SetVariable			V.InsertQuery	"{\"DriveVolumes\" : %Query.Drive%}"
InsertMongoDBBsonDocuments 	V.Database    	V.Collection  	V.InsertStatement

ConnectToMongoDBServer
Connect to a Mongo databser server.

Syntax
ConnectToMongoDBServer	ConnectionString

Parameters
* ConnectionString — Variable name, data file column name, or a string value. 
Examples
ConnectToMongoDBServer     "mongodb:something:27017"                       // error
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%172.16.150.169:27017"     // valid server


DisconnectMongoDBServer 

Note: it is not necessary. Please do not use it in scripts.

Disconnect to the connected Mongo databser server.

Syntax
DisconnectToMongoDBServer

Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%172.16.150.169:27017"     // valid server
DisconnectToMongoDBServer 


CountMongoDBBsonDocuments 
Get the count of Bson documents in a Mongo database.

Syntax
CountMongoDBBsonDocuments  DatabaseName  CollectionName   Query    VariableName

Parameters
* DatabaseName — Variable name, data file column name, or a string value. 
* CollectionName — Variable name, data file column name, or a string value. 

* Query — the query string. Variable name, data file column name, or a string value. 
* VariableName — to store the count. Variable name, data file column name, or a string value. 
Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%172.16.150.169:27017"     // valid server
CountMongoDBBsonDocuments  "Reporting" "Device"      ""    myVarName     // >794,000
CountMongoDBBsonDocuments  "Reporting999"   "Device"      ""  myVarName     // error
CountMongoDBBsonDocuments  "Reporting"      "Device999"   "”  myVarName     // error

CountMongoDBBsonDocuments "Reporting" "Device" "{\"Esn\": \"105DMWCVBFBK00089150\"}"        myVarName     // =1

CountMongoDBBsonDocuments "Reporting" "Device" "{\"Esn\": {$regex: \"105DMWCVBFBK*\"}}"     myVarName     // >150,000

CountMongoDBBsonDocuments "Reporting" "Device" "{\"BadFormat\"}" myVarName     // error

CountMongoDBBsonDocuments "Reporting" "Device" "{\"BadFormat\": \"BadFormat\"}"              myVarName     // 0


GetMongoDBBsonDocuments 
Get the Bson documents in a Mongo database.

Syntax
GetMongoDBBsonDocuments DatabaseName CollectionName   Query  Sort   VariableName Limit	Skip

Parameters
* DatabaseName — Variable name, data file column name, or a string value. 
* CollectionName — Variable name, data file column name, or a string value. 
* Query — the query string. Variable name, data file column name, or a string value. 
* Sort — the sort string. Variable name, data file column name, or a string value. 
* VariableName — to store the count. Variable name, data file column name, or a string value. 
* Limit—the maximum document number returned from MongoDB. Variable name, data file column name, or a string value.
* Skip---the document number not to return from MongoDB. Variable name, data file column name, or a string value.
Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%172.16.150.169:27017"     // valid server

GetMongoDBBsonDocuments  "Reporting"   "Device" "{ \"Esn\" : { $regex : \"105DMWCVBFBK00089*\" } }" "{ \"Esn\" : 1 }"          myVarName     // 767

GetMongoDBBsonDocuments "Reporting" "Device" "{\"Esn\": \"105DMWCVBFBK00089150\"}"  ""       myVarName     // 1

GetMongoDBBsonDocuments “Reporting" "Device" "{\"Esn\": \"105DMWCVBFBK00089150\"}" "{\"Esn\": -1}"         myVarName     // 1

GetMongoDBBsonDocuments "Reporting" "Device" "{\"Esn\": \"105DMWCVBFBK00089150\"}" "{\"Esn\": 1}"          myVarName     // 1

GetMongoDBBsonDocuments "Reporting" "Device" "{\"Esn\" \"105DMWCVBFBK00089150\"}" "{ \"BadFormat\" : 1 }"    myVarName     // 1

GetMongoDBBsonDocuments "Reporting" "Device" "{ \"Esn\" : \"105DMWCVBFBK00089150\"}"                "{ \"BadFormat\" }"        myVarName     // empty

GetMongoDBBsonDocuments  "Reporting" "Device" "{ \"Esn9\" : \"105DMWCVBFBK00089150\"}" ""         myVarName     // empty
GetMongoDBBsonDocuments  "Reporting" "Device" "{ \"Esn9\" }" "" myVarName     // empty

ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%172.16.144.252:22000"     // valid server
GetMongoDBBsonDocuments    "Reporting"   "Device"      "{ \"Esn\" : { $regex : \"105DMWCVBFBK00089*\" } }" "{ \"Esn\" : 1 }"    myVarName                   // 767
GetMongoDBBsonDocuments    "Reporting"   "Device"      "{ \"Esn\" : { $regex : \"105DMWCVBFBK00089*\" } }" "{ \"Esn\" : 1 }"    myVarName     "2"    "1"    // Limit=2 Skip=1

DisconnectMongoDBServer



  
AggregateMongoDBCollection
Aggregate the Bson documents in a Mongo database.

Syntax
AggregateMongoDBCollection DatabaseName CollectionName Match Unwind Group Project Sort VarName   Skip    Limit

Parameters
* DatabaseName — Variable name, data file column name, or a string value. 
* CollectionName — Variable name, data file column name, or a string value. 
* Match  — the query string to find those matched documents. Variable name, data file column name, or a string value. 
* Unwind — Peels off the elements of an array individually. Variable name, data file column name, or a string value. 
* Group — Groups documents together for the purpose of calculating aggregate values based on a collection of documents. Variable name, data file column name, or a string value. 
* Project— Reshapes a document stream by renaming, adding, or removing fields.. Variable name, data file column name, or a string value.
* Sort---the sort string. Variable name, data file column name, or a string value.
* VarName—the variables name to store the result.
* Skip—the number of records to skip.
* Limit—the number of records to return.
Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%DV2CORP2MONGO3:27017"            // valid server

SetVariable                V.Database    "Reporting"
SetVariable                V.Collection  "Device"
SetVariable                V.Match       "{ \"$match\": { \"AgentStatus\": \"A\" } }"
SetVariable                V.Unwind      ""
SetVariable                V.Group       "{ \"$group\": { \"_id\": { \"AccountId\": \"$AccountId\" }, \"Count\" : { \"$sum\": 1 } } }"
SetVariable                V.Project     "{ \"$project\": { \"_id\": 0, \"AccountId\": \"$_id.AccountId\", \"Count\": 1 } }"
SetVariable                V.Sort        "{ \"$sort\": { \"Count\": -1 } }"
AggregateMongoDBCollection V.Database    V.Collection  V.Match       V.Unwind      V.Group       V.Project     V.Sort V.MyVar

SetVariable                V.Database    "Reporting"
SetVariable                V.Collection  "Device"
SetVariable                V.Match       "{ \"$match\": { \"AccountId\": 150006 } }"
SetVariable                V.Unwind      "{ \"$unwind\": \"$DriveVolumes\" }"
SetVariable                V.Group       ""
SetVariable                V.Project     "{ \"$project\": { \"_id\": 0, \"AccountId\": 1, \"Esn\": 1, \"DriveVolumes\": 1} }"
SetVariable                V.Sort        "{ \"$sort\": { \"Esn\": -1 } }"
AggregateMongoDBCollection V.Database    V.Collection  V.Match       V.Unwind      V.Group       V.Project     V.Sort V.MyVar

SetVariable                V.Database    "Reporting"
SetVariable                V.Collection  "Device"
SetVariable                V.Match       ""
SetVariable                V.Unwind      ""
SetVariable                V.Group       "{ \"$group\": { \"_id\": { \"AccountId\": \"$AccountId\" }, \"Count\" : { \"$sum\": 1 } } }"
SetVariable                V.Project     "{ \"$project\": { \"_id\": 0, \"AccountId\": \"$_id.AccountId\", \"Count\": 1 } }"
SetVariable                V.Sort        "{ \"$sort\": { \"AccountId\": 1 } }"
AggregateMongoDBCollection V.Database    V.Collection  V.Match       V.Unwind      V.Group       V.Project     V.Sort V.MyVar   “0”  “10”   //top 10 records.
                     
DisconnectMongoDBServer

RemoveMongoDBBsonDocuments 
Get the Bson documents in a Mongo database.

Syntax
RemoveMongoDBBsonDocuments DatabaseName CollectionName   Query  

Parameters
* DatabaseName — Variable name, data file column name, or a string value. 
* CollectionName — Variable name, data file column name, or a string value. 
* Query — the query string. Variable name, data file column name, or a string value. 
Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%DV2CORP2MONGO3:27017"
SetVariable                 V.Database    "Reporting"
SetVariable                V.Collection  "Device"
SetVariable                V.Query       "{ \"Esn\": \"AABBAASSCCNNEEAACC\" }"    // it should work
//SetVariable              V.Query       "{ \"Esn\": \"AABBAASSCCNNEEA@@@\" }"    // error, the esn does not exist
RemoveMongoDBBsonDocuments V.Database    V.Collection  V.Query

UpdateMongoDBBsonDocuments 
Get the Bson documents in a Mongo database.

Syntax
UpdateMongoDBBsonDocuments DatabaseName CollectionName   Query  Property NewValue

Parameters
* DatabaseName — Variable name, data file column name, or a string value. 
* CollectionName — Variable name, data file column name, or a string value. 
* Query — the query string. Variable name, data file column name, or a string value. 
* Property – the property name that needs to be updated. Variable name, data file column name, or a string value. 
* NewValue—the new value to update. Variable name, data file column name, or a string value. 

Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%DV2CORP2MONGO3:27017"
SetVariable                V.Database    "Reporting"
SetVariable                V.Collection  "Device"
SetVariable                V.Query       "{ \"Esn\": \"AABBAASSCCNNEEAACC\" }"
SetVariable                V.Property    "DeviceName"
SetVariable                V.NewValue    "MyDevice"
UpdateMongoDBBsonDocuments V.Database    V.Collection  V.Query       V.Property    V.NewValue

InsertMongoDBBsonDocuments 
Insert the Bson documents to a Mongo database.
Syntax
InsertMongoDBBsonDocuments DatabaseName CollectionName   Query  
Parameters
* DatabaseName — Variable name, data file column name, or a string value. 
* CollectionName — Variable name, data file column name, or a string value. 
* Query — the query string. Variable name, data file column name, or a string value.  
Examples
ConnectToMongoDBServer     "mongodb:%DOUBLESLASH%DV2CORP2MONGO3:27017"
SetVariable                V.Database    "Reporting"
SetVariable                V.Collection  "Device"
SetVariable                V.Query       "{ \"Esn\": \"AABBAASSCCNNEEAACC\" }"
InsertMongoDBBsonDocuments V.Database    V.Collection  V.Query































Registry Verification Syntax
The statements or commands in this section allow us to verify registry keys, settings and values.

VerifyRegKeyExists
Verifies if a registry key exists.

Syntax
VerifyRegKeyExists Condition KeyName

Parameters
* Condition — Variable name, data file column name, or a string value. Consider the following:
o If condition is “true” and key name exists in the registry, the verification will be successful.
o If condition is “true” and key name does not exist in the registry, an error will be logged.
o If condition is “false” and key name exists in the registry, an error will be logged.
o If condition is “false” and key name does not exist in the registry, the verification will be successful.
o If condition is “[null]” or empty string, the verification will be skipped.
o If condition has any other value, an error will be logged.
* KeyName — Variable name, data file column name, or a string value. The full name of the key. If the value is “[null]” or empty string the verification will be skipped.

Examples
VerifyRegKeyExists "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess"
VerifyRegKeyExists "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess"
VerifyRegKeyExists "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess9"
VerifyRegKeyExists "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess9"

VerifyRegKeyExists "" ""
VerifyRegKeyExists "[null]" "[null]"
VerifyRegKeyExists "[null]" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess"
VerifyRegKeyExists "" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess"

VerifyRegKeyExists "false" "[null]"
VerifyRegKeyExists "true" "[null]"


VerifyRegValueExists 
Verifies if a registry setting exists.

Syntax
VerifyRegValueExists Condition KeyName SettingName

Parameters
* Condition — Variable name, data file column name, or a string value. Consider the following:
o If condition is “true” and the value name exists in the registry, the verification will be successful.
o If condition is “true” and the value name does not exist in the registry, an error will be logged.
o If condition is “false” and the value name exists in the registry, an error will be logged.
o If condition is “false” and the value name does not exist in the registry, the verification will be successful.
o If condition is “[null]” or empty string, the verification will be skipped.
o If condition has any other value, an error will be logged.
* KeyName — Variable name, data file column name, or a string value. The full name of the key. Consider the following:
o The key name must exist in order to verify the value. If the key does not exist, an error will be logged.
o If key name is “[null]” or empty string, the verification will be skipped.
* SettingName — Variable name, data file column name, or a string value. The setting name. Consider the following:
o If setting name is “[null]” or empty string, the verification will be skipped.

Examples
VerifyRegValueExists "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer"
VerifyRegValueExists "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer9"
VerifyRegValueExists "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer"
VerifyRegValueExists "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer9"

VerifyRegValueExists "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "[null]"
VerifyRegValueExists "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" ""


VerifyRegValue
Verifies a registry setting against a specific value.

Syntax
VerifyRegValue Condition KeyName SettingName Value

Parameters
* Condition — Variable name, data file column name, or a string value. Consider the following:
o If condition is “true” and the setting is equal to the value, the verification is successful.
o If condition is “true” and the setting is not equal to the value, an error will be logged.
o If condition is “false” and the setting is equal to the value, an error will be logged.
o If condition is “false” and the setting is not equal to the value, the verification is successful.
o If condition is “[null]” or empty string, the verification will be skipped.
o If condition has any other value, an error will be logged.
* KeyName — Variable name, data file column name, or a string value. The full name of the key. Consider the following:
o The key name must exist in order to verify the value. If the key does not exist, an error will be logged.
o If key name is “[null]” or empty string, the verification will be skipped.
* SettingName — Variable name, data file column name, or a string value. The setting name or variable name. Consider the following:
o If the setting name does not exist, an error will be logged.
o If setting name is “[null]” or empty string, the verification will be skipped.
* Value — Variable name, data file column name, or a string value. The expected value. If the value is “[null]” the verification will be skipped.

Examples
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer" "6.1.7601.17514"
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer9" "6.1.7601.17514"
VerifyRegValue "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer" "6.1.7601.17514"
VerifyRegValue "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer9" "6.1.7601.17514"

VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer" "6.1.7601.751"
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer9" "6.1.7601.751"
VerifyRegValue "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer" "6.1.7601.751"
VerifyRegValue "false" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer9" "6.1.7601.751"

VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "[null]" "[null]"
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "" ""
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer" "[null]"
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "[null]" "6.1.7601.17514"
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer" ""
VerifyRegValue "true" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "" "6.1.7601.17514"


GetRegValue 
Assigns a registry setting to a variable.

Syntax
GetRegValue VariableName KeyName SettingName

Parameters
* VariableName — Constant value, user-defined name for the variable. Gets the value of the setting.
* KeyName — Variable name, data file column name, or a string value. Consider the following:
o The key name must exist in order to get the value. If the key does not exist, an error will be logged.
o If key name is “[null]” or empty string, the verification will be skipped.
* SettingName — Variable name, data file column name, or a string value.
o The setting name must exist in order to get the value. If the setting does not exist, an error will be logged.
o If setting name is “[null]” or empty string, the verification will be skipped.

Examples
GetRegValue MyVar "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "FullInstallVer"
GetRegValue MyVar "" "FullInstallVer"
GetRegValue MyVar "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" ""
GetRegValue MyVar "[null]" "FullInstallVer"
GetRegValue MyVar "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DataAccess" "[null]"




SetRegValue 
Set a value to a registry setting

Syntax
SetRegValue KeyName SettingName	SettingType	SettingValue

Parameters
* KeyName — The name of the registry key
* SettingName — The name/value pair in the registry key that you want to set the value to
* SettingType — The registry data type of the name/value pair
o Available types: DWord, Qword, String, MultiString, ExpandString, Binary
* SettingValue — The value that you want to set to the registry name/value pair
o For MultiString, you can separate the string by comma (,).  However, comma is not allowed in the string
o For binary, you can provide a list of decimal numbers separated by comma (,).  The engine will convert the decimal numbers to hexadecimal and update the registry.  For example, you need to enter “45” for the value “2D” on the registry
Examples
SetRegValue "HKEY_LOCAL_MACHINE\SOFTWARE\Testing" "testing"		"DWord"	"223456790"
SetRegValue "HKEY_LOCAL_MACHINE\SOFTWARE\Testing " "testingbyte"	"Binary" "23,35,16,10"
SetRegValue "HKEY_LOCAL_MACHINE\SOFTWARE\Testing " "testingstrings" "MultiString"	"richard,peters,johna,jenny"
SetRegValue "HKEY_LOCAL_MACHINE\SOFTWARE\Testing " "testingstring" "String"		"richarda,peters,johna,jennys"
SetRegValue "HKEY_LOCAL_MACHINE\SOFTWARE\Testing " "testingqword"  "QWord"		"98765432101234567"
SetRegValue "HKEY_LOCAL_MACHINE\SOFTWARE\Testing " "testingestring" "ExpandString"	"The path is %PATH%"

Json Syntax
The statements or commands in this section allow us to process Json documents or objects in memory.
CreateJsonDoc
Create a Json document in memory.

Syntax
CreateJsonDoc Name Document

Parameters
* Name — Variable name, the document name to be created in memory.
* Document — Variable name, the document body to be stored in memory. 
o The document string may contain other variables or a marco. 
o A marco may look like [ %[InventoryFigurePrinting]% ].

Examples
CreateJsonDoc "InventoryFigurePrinting"  "{ \"AgentVersion\" : \"%DCAgentVersion%\", \"UniqueIdentifier\" : \"%DCUniqueId%\", \"ESN\" : \"%DCESN%\", \"Make\" : \"%DCMake%\", \"Model\" : \"%DCModel%\", \"OperatingSystem\" : \"%DCOperatingSystem%\" }"

CreateJsonDoc "InventoryFigurePrintings" "{ \"inventoryFigurePrintings\" : [ %[InventoryFigurePrinting]% ], \"orderID\" : \"%DCOrderID%\" }"

SetJsonDocObject
Set a Json document to a Json object in memory.

Syntax
SetJsonDocObject DocName ObjectName

Parameters
* DocName — Variable name, the Json document name.
* ObjectName — Variable name, the child object name. 

Examples
CreateJsonDoc "InventoryFigurePrinting"  "{ \"AgentVersion\" : \"%DCAgentVersion%\", \"UniqueIdentifier\" : \"%DCUniqueId%\", \"ESN\" : \"%DCESN%\", \"Make\" : \"%DCMake%\", \"Model\" : \"%DCModel%\", \"OperatingSystem\" : \"%DCOperatingSystem%\" }"

SetJsonDocObject "InventoryFigurePrinting" "myInventoryFigurePrintingObj"




AddJsonDocChild
Add a Json object to another object with a marco defined .

Syntax
AddJsonDocChild ParentName ChildName

Parameters
* ParentName — Variable name, the parent object name where the child object will be added.
o A marco must be defined in the parent object.
* ChildName — Variable name, the child object name. 


Examples
SetJsonDocObject "InventoryFigurePrinting" "myInventoryFigurePrintingObj"
SetJsonDocObject "InventoryFigurePrintings" "myInventoryFigurePrintingsObj"

AddJsonDocChild "myInventoryFigurePrintingsObj" "myInventoryFigurePrintingObj"


FinalizeJsonDocObject
Replace all variables in a Json object with the actual values.

Syntax
FinalizeJsonDocObject ObjectName

Parameters
* ObjectName — Variable name, the object name to be finalized.
.

Examples
CreateJsonDoc "InventoryFigurePrinting"  "{ \"AgentVersion\" : \"%DCAgentVersion%\", \"UniqueIdentifier\" : \"%DCUniqueId%\", \"ESN\" : \"%DCESN%\", \"Make\" : \"%DCMake%\", \"Model\" : \"%DCModel%\", \"OperatingSystem\" : \"%DCOperatingSystem%\" }"

CreateJsonDoc "InventoryFigurePrintings" "{ \"inventoryFigurePrintings\" : [ %[InventoryFigurePrinting]% ], \"orderID\" : \"%DCOrderID%\" }"

SetJsonDocObject "InventoryFigurePrinting" "myInventoryFigurePrintingObj"
SetJsonDocObject "InventoryFigurePrintings" "myInventoryFigurePrintingsObj"
AddJsonDocChild "myInventoryFigurePrintingsObj" "myInventoryFigurePrintingObj"

FinalizeJsonDocObject "myInventoryFigurePrintingsObj"

VerifyJsonValue
Verify whether a value is expected in a Json object.

Syntax
VerifyJsonValue ObjectName Path Operator Value  IgnoreCase

Parameters
* ObjectName — Variable name, the object name to be verified.
* Path — Variable name, the name of an item in Json documents. 
o For example, “StatusCode” is the Path in the Json document below.
* "{"Description":"","StatusCode":200}"
* Operator — Constant name, <Equal | NotEqual|In|NotIn|Contains|DoesNotContain>.
* Value — Variable name, the expected value of the Path. The value is 200 in the example.
* IgnoreCase –{true|false}
.

Examples
VerifyJsonValue "MyServiceDiscoveryResponse" "StatusCode" "Equal" "200"
VerifyJsonValue "MyServiceDiscoveryResponse" "StatusCode" "NotEqual" "401" 
VerifyJsonValue "MyServiceDiscoveryResponse" "StatusCode" "In" "400,401,404" 

VerifyJsonValue "MyServiceDiscoveryResponse" "MemberIds" "Contains" "1029”   
   

VerifyJsonElementExists
Verify whether a Json element exists in a Json object or assign the bool value to a variable.

Syntax
VerifyJsonElementExists ObjectName Path Operator Variablename

Parameters
* ObjectName — Variable name, the object name to be verified.
* Path — Variable name, the name of an item in Json documents. 
* Operator — Constant name, <Exists | DoesNotExist>.
* Variablename – name of the variable


Examples
VerifyJsonElementExists "MyServiceDiscoveryResponse" "StatusCode" "Exists"
VerifyJsonElementExists "MyServiceDiscoveryResponse" "StatusCode1" "DoesNotExist"
VerifyJsonElementExists "MyServiceDiscoveryResponse" "StatusCode1" "DoesNotExist"  “V.Element.Exists”


ClearJsonObjects
Remove all Json objects from memory.

Syntax
ClearJsonObjects

Examples
SetJsonDocObject "InventoryFigurePrinting" "myInventoryFigurePrintingObj"
SetJsonDocObject "InventoryFigurePrintings" "myInventoryFigurePrintingsObj"
AddJsonDocChild "myInventoryFigurePrintingsObj" "myInventoryFigurePrintingObj"

ClearJsonObjects



RemoveJsonDocElement
Remove an element from a Json object.

Syntax
RemoveJsonDocElement ObjectName ElementName

Parameters
* ObjectName — Variable name, the Json object name.
* ElementName — Variable name, the element name to be removed. 
.

Examples
CreateJsonDoc              "myDoc1"      "{ \"DisplayName\" : \"RandomTest1540539358\", \"Description\" : \"null\", \"DeviceGroup\" : { \"SystemName\" : \"Folder Group\", \"DisplayName\" : \"RandomTest1540539358\", \"Description\" : null, \"SearchFilter\" : { \"Operator\" : \"And\", \"Groups\" : [{ \"Operator\" : \"Or\", \"Groups\" : [], \"Fields\" : [{ \"FieldSystemName\" : \"Device.AgentStatus\",  \"Operator\" : \"Equals\", \"Value\" : \"A\", \"DisplayValue\" : \"Active\" } ] } ], \"Fields\" : [] }, \"GroupType\" : \"Smart\", \"IsReadOnly\" : false, \"GroupMemberIds\" : null }, \"ParentRelation\" : \"null\", \"ChildrenRelations\" : [], \"NodeType\" : \"Group\" }"
SetJsonDocObject           "myDoc1"      "myObj1"
FinalizeJsonDocObject      "myObj1"

RemoveJsonDocElement "myObj1"      "DeviceGroup.SearchFilter.Groups[0].Fields[0].Operator"
RemoveJsonDocElement "myObj1"      "DeviceGroup.SearchFilter.Groups[0].Fields[0]"  // This does not work
RemoveJsonDocElement "myObj1"      "DeviceGroup.SearchFilter.Groups[0].Fields"     // Note that is deleting the whole array here
RemoveJsonDocElement "myObj1"      "DeviceGroup.SearchFilter.Groups[0]"            // This does not work
RemoveJsonDocElement "myObj1"      "DeviceGroup.SearchFilter.Groups"               // Note that is deleting the whole array here
RemoveJsonDocElement "myObj1"      "DeviceGroup.SearchFilter"
RemoveJsonDocElement "myObj1"      "DeviceGroup"



AddJsonDocElement
Add an element to  a Json object.

Syntax
AddJsonDocElement ObjectName ElementName ElementValue

Parameters
* ObjectName — Variable name, the Json object name.
* ElementName — Variable name, the element name to add. 
* ElementValue — Variable name, the element value to add. 
.

Examples
AddJsonDocElement V.AMCTIS.WS.Json.ObjectName “Date” “2012-05-30”


AddJsonDocPair
Add a key and value pair to a list. The list stores a key and its value, which can be used for verification.

Syntax
AddJsonDocPair ListName Key Value

Parameters
* ListName — Variable name, the list name to store key and value pairs.
* Key — Variable name, the key to add. 
* Value — Variable name, the value to add. 
.

Examples
AddJsonDocPair DeviceRegistrationList "75280c3c-3ea4-461f-ab36-c9598ac2c093" “400”

VerifyJsonDocPair
Verify if the Json document contains the value of the pair.

Syntax
VerifyJsonDocPair ListName ResponseData KeyElement ComparisonElement

Parameters
* ListName — Variable name, the list name to store key and value pairs.
* ResponseData — Variable name, the Json document.
* KeyElement — Variable name, the key to find the expected value. 
* ComparisonElement — Variable name, the element name to compare. 
.

Examples
VerifyJsonDocPair DeviceRegistrationList ResponseData "75280c3c-3ea4-461f-ab36-c9598ac2c093" “Devices[%ITEMCOUNTER%].FingerprintData.AgentVersion”


AddJsonDocRoot
Add a root element to an existing Json document.

Syntax
AddJsonDocRoot OriginalJsonDoc   NewJsonDoc    Structure

Parameters
* OriginalJsonDoc— Variable name, the original Json document need to add a root.
* NewJsonDoc— Variable name, the new name of the Json document after adding a root.
* Structure — Variable name, the final structure of the new Json document. It should contain the original Json document inside. 
.

Examples
AddJsonDocRoot “myDoc1”   “myDoc2”    “{\”Data\” : [ %myDoc1% ] }”
FinalizeJsonDocObject	“myDoc2”


CompareJsonDocObjects
Compare if the first Json documents is same as the second Json document or part of the second one.

Syntax
CompareJsonDocObjects FirstObject SecondObject Option ExcludeElements

Parameters
* FirstObject — Variable name, the first Json document.
* SecondObject — Variable name, the second Json document.
* Option — Constant name, <SkipNull | SkipNone>.
* ExcludeElements--Variable name, data file column name, or a string value.

Examples
CompareJsonDocObjects   “myDoc1”   “myDoc2”    “SkipNull”
CompareJsonDocObjects   “myDoc1”   “myDoc2”    “SkipNull”	“Id|UserId”

//use full path in the ExcludeElement
CompareJsonDocObjects   “myDoc1”   “myDoc2”    “SkipNull”	“Data.id”





GetJsonDocElementValue
Get the value of an element in the Json document.

Syntax
GetJsonDocElementValue JsonObject PathOfElement VariableName

Parameters
* JsonObject — Variable name, the Json document.
* PathOfElement — Variable name, the Json path to an element.
* VariableName — Variable name, the variable to store the value.

Note: it will return the whole document if the path is an empty string.
Examples
GetJsonDocElementValue	“myObj”	“Data[0].Description”	“myVar”

ReplaceJsonDocSubstring
Replace some strings in the Json document.

Syntax
ReplaceJsonDocSubstring JsonObject OriginalString ReplaceString Options 

Parameters
* JsonObject — Variable name, the Json document.
* OriginalString — Variable name, data file column name, or a string value.
* ReplaceString — Variable name, data file column name, or a string value.
* Options—Constants <AddQuotes|DoNotAddQuotes>
Examples
ReplaceJsonDocSubstring "V.AMCTIS.WS.RequestData" "DeviceIdentifier"  "myDeviceIdentifier" "AddQuotes"

ReplaceJsonDocSubstring    "V.AMCTIS.WS.RequestData"  "\"myDeviceIdentifier\""   "new CSUUID(myDeviceIdentifier)" "DoNotAddQuotes"

ReplaceJsonDocSubstring    "V.AMCTIS.WS.RequestData"  "new CSUUID("              ""                                 "DoNotAddQuotes"

ReplaceJsonDocSubstring    "V.AMCTIS.WS.RequestData"  ") :"                      " :"                               "DoNotAddQuotes"
LogJsonDocOutput
Enable or disable the output Json document texts in the QAPlayer log file.

Syntax
LogJsonDocOutput Options 

Parameters
* Options—Constants <true|false>
Examples
LogJsonDocOutput	“false"


GetJsonDocArrayCount
Get the count of an array in the Json document.  If the ArrayName specified in the parameter is not an array, the statement will return -1.

Syntax
GetJsonDocArrayCount    ObjectName           ArrayName            VarName

Parameters
* ObjectName — Variable name, the Json document.
* ArrayName — Variable name, the Json path to an array.
* VarName — Variable name, the variable to store the value.

Examples
CreateJsonDoc              "myDevicesDoc"       "{ \"Devices\" : [ { \"DeviceNo\" : 1 }, { \"DeviceNo\" : 2 }, { \"DeviceNo\" : 3 }, { \"DeviceNo\" : 4 } ] }"

SetJsonDocObject           "myDevicesDoc"       "myDevicesObject"
FinalizeJsonDocObject      "myDevicesObject"

// GetJsonDocArrayCount    ObjectName           ArrayName            VarName
GetJsonDocArrayCount       "myDevicesObject"    "Devices"            V.ArrayCount

//More examples.
GetJsonDocArrayCount    "JsonObject"    "Data[1].NetworkAdapters"       V.ArrayCount

GetJsonDocArrayCount    "JsonObject"    "Data.DriverVolumes"            V.ArrayCount

FlatJsonDocArray
Flat a Json document with a specified array name. The output could be sorted by sort path and sort direction. We may also skip some items or/and then limit the return item count.

Syntax
FlatJsonDocArray    InputObjectName    OutputObjectName     MainArrayPath    InternalArrayPath    SortPath    SortDirection    LimitElements    SkipElements
Parameters
* InputObjectName — Variable name, the input Json document.
* OutputObjectName — Variable name, the result Json document.
* MainArrayPath—the top level array path for lookup.
* InternalArrayPath—the path of the array to flat
* SortPath—the element path in the item to sort
* SortDirection—Constant.<Ascending|Descending>
* LimitElements — Variable name, to determine the count of returned items.
* SkipElements — Variable name, to determine the count of skipped items before returning the result.

Examples
CreateJsonDoc              "myChangeMapDoc"           "{ Data : [ { \"id\" : \"001\", \"field1\" : \"xyz\", \"ChangeMap\" : [ { \"a\" : \"9\", \"b\" : \"10\" }, { \"a\" : \"8\", \"b\" : \"20\" }, { \"a\" : \"7\", \"b\" : \"30\" }, { \"a\" : \"6\", \"b\" : \"40\" } ] }, { \"id\" : \"002\", \"field1\" : \"def\", \"ChangeMap\" : [ { \"a\" : \"5\", \"b\" : \"10\" }, { \"a\" : \"4\", \"b\" : \"60\" } ] } ] }"

SetJsonDocObject   "myChangeMapDoc"  "myChangeMapObj" FinalizeJsonDocObject      "myChangeMapObj"

FlatJsonDocArray   "myChangeMapObj"  "myOutput"  "Data"  "ChangeMap"   "a"   “Ascending” 2      0
FlatJsonDocArray   "myChangeMapObj"  “myOutput"  "Data"  "ChangeMap"   "a"   “Descending” 2      2
FlatJsonDocArray   "myChangeMapObj"  "myOutput"  "Data"  "ChangeMap"   "a"   “Ascending” 2      4
FlatJsonDocArray   "myChangeMapObj"  "myOutput"  "Data"  “ChangeMap"   "b"   "Ascending" 0     0

CloneJsonDocObject
Clone  the Json document.

Syntax
CloneJsonDocObject JsonObject NewJsonObject

Parameters
* JsonObject — Variable name, the Json document to clone.
* NewJsonObject — Variable name, the new Json document.

Examples
CreateJsonDoc               "myChangeMapDoc"     "{ Data : [ { \"id\" : \"001\", \"field1\" : \"xyz\", \"ChangeMap\" : { \"a\" : \"9\", \"b\" : \"10\" } }, { \"id\" : \"002\", \"field1\" : \"def\", \"ChangeMap\" : [ { \"a\" : \"5\", \"b\" : \"10\" }, { \"a\" : \"4\", \"b\" : \"60\" } ] } ] }"

SetJsonDocObject            "myChangeMapDoc"     "myChangeMapObj"
FinalizeJsonDocObject      "myChangeMapObj"
CloneJsonDocObject          "myChangeMapObj"     "myCloneObj"

JsonReadConfigFile
Read a Json config file and set variables

Syntax
JsonReadConfigFile FileName

Parameters
* FileName — The Json config file containing Key / Value pairs.
Examples
JsonReadConfigFile	"Environment.config”  

The file in this example Environment.config should be a json document containing only integers, or string values. 

{
  "V.UserName": "user@absolute.com",
  "V.Password": "password",
  "V.LoginMessage": "%CCMap.WebUI.User.Login.LblMyProfile%",
  "V.AccountId":  200056
}







CompareJsonDocElementValue 
Compare the specific fields from two json docs
Syntax
CompareJsonDocElement	JsonObjSource	PathOfElementSource		JsonObjTarget	PathOfElementTarget	Operator	VariableName

Parameters
* JsonObjSource – The name of the source json doc 
* PathOfElementSource – The path of the source element
* JsonObjTarget – The name of the target json doc
* PathOfElementTarget  - The path of the target element
* Operator – Equal or NotEqual
* VariableName – The name of the variable that you want to save the true | false result to

Examples
CompareJsonDocElement	"V.Json1"	"Root.Match[i].Fn"	"V.JsonDB"	"[%V.Index%].fileName		"Equal"		V.Result


GetJsonDocArrayElementIndex
Get the index of an array element by the specific field and value
Syntax
GetJsonDocArrayElementIndex	JsonObj	PathOfArrayElement	SearchFieldName	SearchFieldValue	VariableName

Parameters
* JsonObj – The name of the json doc 
* PathOfArrayElement – The path of the array element
* SearchFieldName – The name of the field that you want to search
* SearchFieldValue – The value of the search field
* VariableName – The name of the variable that you want to save the index value to

Note: If the json doc itself is an array already, you can leave the PathOfArrayElement blank
Examples
GetJsonDocArrayElementIndex		"V.BsonDoc"			"Root.Match"							"fileName"			"%V.JsonName4Value%"		V.Index












JsonConvertFromXMLStr
Convert the XML string variable to json variable
Syntax
JsonConvertFromXMLStr	XMLStr	JsonDocVar

Parameters
* XMLStr – the xml content in string format
* JsonDocVar – the name of the json doc
Examples
ConvertXMLInZipToString		"C:\WStest.zip"		V.TestXML
JsonConvertFromXMLStr		V.TestXML			V.JsonName1


RESTful Syntax
The statements or commands in this section allow us to process RESTful web service requests and responses.
SetRESTfulHeader
Set a header element and its value in HTTP requests.

Syntax
SetRESTfulHeader ElementName Value

Parameters
* ElementName — Variable name, the element name to be set in the header of HTTP requests.
* Value — Variable name, the value of the element in the header of HTTP requests. 

Examples
SetRESTfulHeader "Content-Type"  "application/json"



CallRESTfulWebService
Call the RESTful Web Service and get the response.

Syntax
CallRESTfulWebService Url Method JsonDoc Response

Parameters
* Url — Variable name, the web service Url.
* Method — Variable name, the HTTP method used to call the web service, e.g. POST.
* JsonDoc — Variable name, the Json document in the request body.
* Response— Variable name, the response from the web service. 

Examples
CreateJsonDoc "ServerLogin" "{\"ServerLogin\":{\"ServerUid\":\"AM_SERVER_UID_001\",\"ServerUidSignature\":\"ffJWBdBdaaBUsRwS0gPTuuQSYH72nmoaQsht9K922oR1O/q3tl3SERb8euu1seQbAPpVEluDipJ44DEbW8eWh3xjs7nmy/PaoyGqMvTb/iM9jy82dfrR1l3+XnSAotjtZ8OdQgk2Dc0DEmWd0PxD3xoylKPRF6N2MX2GduaX5IU=\"}}"
SetJsonDocObject "ServerLogin" "myServerLoginObj"
FinalizeJsonDocObject "myServerLoginObj"

SetVariable myUrl  http:%DOUBLESLASH%dv2corp2apiservices2008.absolute.com/ServiceLayer/ServiceLayer/Authentication"

SetVariable myMethod "Post"
SetVariable myRequestDataVar   "myServerLoginObj"
SetVariable myResponseVariable   "MyServiceDiscoveryResponse"

SetRESTfulHeader "Content-Type"  "application/json"
CallRESTfulWebService myUrl myMethod myRequestDataVar myResponseVariable

SetVarFromRESTfulHeader
Set a variable by a header element’s value.

Syntax
SetVarFromRESTfulHeader VariableName HeaderElementName

Parameters
* VariableName — Variable name, the variable’s name to be set.
* HeaderElementName — Variable name, the element name in the header of RESTful service. 

Examples
SetVarFromRESTfulHeader "myVariable"  "Content-Type"

VerifyRESTfulHeaderExists
Verify whether a header element exists.

Syntax
VerifyRESTfulHeaderExists HeaderElementName Operator

Parameters
* HeaderElementName — Variable name, the element name to verify.
* Operator — Constant name, <Exists | DoesNotExist>.

Examples
VerifyRESTfulHeaderExists "Content-Type"  "Exists"

VerifyRESTfulHeaderValue
Verify whether a header element’s value is expected.

Syntax
VerifyRESTfulHeaderValue HeaderElementName Operator Value

Parameters
* HeaderElementName — Variable name, the element name to verify.
* Operator — Constant name, <Equal | NotEqual>.

Examples
VerifyRESTfulHeaderValue "Content-Type" "Equal" "application/json"
VerifyRESTfulHeaderValue "Content-Type" "NotEqual" "application/jpeg"


VerifyRESTfulCallTime
Verify whether responses from the web service are returned within the given time.

Syntax
VerifyRESTfulCallTime TimeLimitMS

Parameters
* TimeLimitMS — Integer, the time limit in millisecond.
 
Examples
VerifyRESTfulCallTime	3000



VerifyRESTfulStatusCode
Verify the request call status code returned from the web service.

Syntax
VerifyRESTfulStatusCode ExpectedCode
Parameters
* ExpectedCode — Integer, the HTTP request status code.
 
Examples
VerifyRESTfulStatusCode	200

VerifyRESTfulStatusCode	404




EditRESTfulHeaderValue
Edit a value in the header of RESTful service.

Syntax
EditRESTfulHeaderValue HeaderName	Operator	Separator	ElementIndex
Parameters
* HeaderName — Variable name, the name of a header element.
* Operator — Constant value, <Split>.
* Separator — Variable name, the delimiter to separate the header value.
* ElementIndex — Variable name, the index in the string array after the value is separated. The new value will replace the original value in the header.
 
Examples
//Use the the second value in the array after the original value is separated.
EditRESTfulHeaderValue   "Cookie"    "Split"    ","         "1"





Spira Syntax
The statements or commands in this section allow us to process test cases and test results in SpiraTeam.
SetSpira 
Connect to SpiraTest and the TestSet in the SpiraTeam.

Syntax
SetSpira Url User Pass ProjectId TestSetFolderId TestSetName TestSetId

Parameters
* Url — Variable name, the Url to the SpiraTeam web service.
* User — Variable name, the username to login to the SpiraTeam through its web service. 
* Pass — Variable name, the user’s password to login to the SpiraTeam through its web service. 
* ProjectId — Variable name, the project id in the SpiraTeam. 
* TestSetFolderId — Variable name, the folder id in the project. 
* TestSetName — Variable name, the test set name. 
* TestSetId — Variable name, the test set id. 

Examples
SetSpira http://spiratest/wsApi jSmith jSmith 43 4101 myFirstTestSet 4098



StartSpiraTCRun
Start running a test case in the SpiraTeam.

Syntax
StartSpiraTCRun TestCaseId

Parameters
* TestCaseId — Variable name, the test case id in the SpiraTeam.
 
Examples
StartSpiraTCRun 061310









LogSpiraTCResults
Log the current running test case’s results into the SpiraTeam. This statement will also add the test case results to the QAPlayerResults.csv file. The csv file is used by the FinalizeResults, and CreateResultsSummary reports.

Syntax
LogSpiraTCResults

Examples
StartSpiraTCRun 061310
LogSpiraTCResults

FinalizeResults
This statement finalizes the test run results, and is required before executing the CreateResultsSummary statement. The statement will combine all QAResults*.csv files in the script folder into the file “QAResultsFinal.csv”.

Syntax
FinalizeResults

Examples
FinalizeResults

AddEnvironmentItem
This statement will add an environment item to an internal list. This list is used later when creating the results summary email. The environment items will be printed in the Execution Environment section of the report which is generated using the CreateResultsSummaryStatement.
Syntax
AddEnvironmentItem	Name		Value

Parameters
* Name - The name of the environment item.
* Value – The value of the environment item.
Examples
AddEnvironmentItem	“URL”		V.URL
AddEnvironmentItem	“AccountId”	V.AccountId
CreateResultsSummary
This statement will generate the final results summary in a form that can be sent as HTML email. The variable specified will be set to the HTML code to be used as the email body when sending the results as an emal. This statement will also save the existing .csv files in the folder “ArchivedResults” which is created in the current script folder.

Syntax
CreateResultsSummary	EmailBody

Parameters
* EmailBody — Variable name to hold the HTML code for the email body.

Examples
CreateResultsSummary	V.EmailBody

EnableSpiraUpdate
Enable the spira update feature.  By default, it is disabled.

Syntax
EnableSpiraUpdate trueOrFalse

Parameters
* trueOrFalse — If you want to turn it on, set to “true”.  If not, “false”.
 
Examples
EnableSpiraUpdate “true”

WinProc Syntax
The statements or commands in this section allow us to handle process in Windows platform.

WaitIfWinProcInstances
The execution waits for a number of Windows process instances to complete, then continues.

Syntax
WaitIfWinProcInstances ProcessName  Operator NumberOfCopies

Parameters
* ProcessName — Variable name, the process name.
* Operator — Constant value, < GreaterThan |  EqualTo | NotEqualTo | SmallerThan >. 
* NumberOfCopies — Variable name, the count of the running process instances.
Examples
WaitIfWinProcInstances “QAPlayer” “GreaterThan” “4”

KillWinProcess
As a QAPlayer user I want to be able to kill a process.

Syntax 
KillWinProcess ProcessName	LogErrorIfProcessDoesNotExist
Parameters
* ProcessName — The name of process. < Variable Name | Data File Column Name | String Value >
* LogErrorIfProcessDoesNotExist—Constant. <True|Flase>

Example
SetVariable V.FileName  	“notepad”
KillWinProcess V.FileName  “True”

KillWinTask
As a QAPlayer user I want to be able to kill a task (from Application list).

Syntax 
KillWinTask TaskName
Parameters
* TaskName — Task name of application. < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.TaskName  	“notepad”
KillWinTask V.TaskName  


VerifyWinProcessRun
As a QAPlayer user I want to be able to verify a number of instances for a specific process are running. Log an error if condition is false.

Syntax 
VerifyWinProcessRun ProcessName ProcessNumber
Parameters
* ProcessName — Name of process. < Variable Name | Data File Column Name | String Value >
* ProcessNumber — Integer, the number expects to verify a process < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.ProcessName	“YahooMessenger”
SetVariable V.ProcessNumber 2
VerifyWinProcessRun V.ProcessName V.ProcessNumber


VerifyWinProcessMemory
As a QAPlayer user I want to be able to verify a process is using less or more memory than expected. Log an error if condition is false.

Syntax 
VerifyWinProcessMemory ProcessName MemoryNumber
Parameters
* ProcessName — Name of process. < Variable Name | Data File Column Name | String Value >
* MemoryNumber — Long, the number expects to verify memory of process(by byte) < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.ProcessName	“notepad”
SetVariable V.MemoryNumber	1532045
VerifyWinProcessMemory V.ProcessName V.MemoryNumber




VerifyWinProcessCPU
As a QAPlayer user I want to be able to verify a process is using less or more CPU than expected. Log an error if condition is false.

Syntax 
VerifyWinProcessCPU ProcessName MemoryNumber
Parameters
* ProcessName — Name of process. < Variable Name | Data File Column Name | String Value >
* MemoryNumber — Integer, the number expects to verify memory of process < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.ProcessName	“notepad”
SetVariable V.MemoryNumber    5
VerifyWinProcessCPU V.ProcessName  V.MemoryNumber


VerifyWinProcessTitle
As a QAPlayer user I want to be able to verify the title of process is running. Log an error if condition is false.

Syntax 
VerifyWinProcessTitle ProcessName TitleName
Parameters
* ProcessName — Name of process. < Variable Name | Data File Column Name | String Value >
* TitleName — Title of process < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.ProcessName	“YahooMessenger”
SetVariable V.TitleName		“Yahoo! Messenger”
VerifyWinProcessTitle V.ProcessName  V.TitleName



VMWare Syntax
NOTE: All of the VMWare statements are not working at this moment.  We need to upgrade to the latest VMWare libraries in QA Player in order to fix the issue.  We will update this section when it is resolved.

The statements in this section allow us to automate virtual machine operations and run programs to manipulate files within guest operation system. These statements can work on Window or Linux and support management of VMWare Workstation, Player, Server1.0, Server2.0, ESX/ESXi, optional through vCenter.

ConnectToVMWServer
This function can connect to VMware player, VMware Workstation,VMware Server,ESX/ESXi host


Syntax
ConnectToVMWServer  ServerType ServerName Port Username Password HostName 

Parameters
* ServerType — Constants value < Workstation | WorkstationShared | VMWServer | VMWPlayer | VIServer >.
* ServerName — IP/Name of server. < Variable Name | Data File Column Name | String Value >.
* Port  — TCP/IP port on the remote host. With VMware Workstation and VMware Player, use zero for the local host. With ESX/ESXi hosts, VMware Workstation (shared mode) and VMware Server 2.0 you specify port number within the hostName parameter, so this parameter is ignored.  < Variable Name | Data File Column Name | String Value >
* Username — Username for authentication on the remote machine.With VMware Workstation, VMware Player, and VMware Server 1.0.x, use NULL to authenticate as the current user on local host. With vCenter Server, ESX/ESXi hosts, VMware Workstation (shared mode) and VMware Server 2.0, you must use a valid login.  < Variable Name | Data File Column Name | String Value >
* Password — Password for authentication on the remote machine. With VMware Workstation, VMware Player, and VMware Server 1.0.x, use NULL to authenticate as the current user on local host. With ESX/ESXi, VMware Workstation (shared mode) and VMware Server 2.0, you must use a valid login.  < Variable Name | Data File Column Name | String Value >
HostName — Naming connected host.  < Variable Name | Data File Column Name | String Value > 

Examples
//Example1 connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]" "[null]" "[null]" [null]" "WSLocal" 

// Example2 connect to VMWare Workstation on remote host
ConnectToVMWServer "WorkstationShared" "https://174.16.10.100/sdk" "443" sername" "Password" "WSShared"
ConnectToVMWServer "WorkstationShared" "https://174.16.10.100:443/sdk" "0" "Username"  "Password" "WSShared" 

// Example3 connect to VMWare server1.0.x on localhost
ConnectToVMWServer "VMWServer" "[null]" "[null]" "[null]" "[null]" "VMS1.0" 

// Example3 connect to VMWare player on localhost
ConnectToVMWServer "VMWPlayer" "[null]" "[null]" "[null]" "[null]" "VMP" 

// Example3 connect to VMWare VI Server(VMWare server2.0,ESX/ESXi,vCenter Server) on remote host
ConnectToVMWServer "VIServer" "https://174.16.10.100/sdk" "443" "Username"  "Password" "ServerName"
ConnectToVMWServer "VIServer" "https://174.16.10.100:443/sdk" "0" "Username"  "Password" " ServerName"


OpenVMW
Open a virtual machine on the host.

Syntax
OpenVMW VMPath VMName Host 

Parameters
* VMPath - The path to the vmx file.  < Variable Name | Data File Column Name | String Value >
* VMName  - The name of VM, this name will be used in other statements.  < Variable Name | Data File Column Name | String Value >
* Host - Host name returned from ConnectToVMWServer statement

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal"


StartVMW
Start a virtual machine

Syntax
StartVMW  VMName  

Parameters
* VMName  - The name of VM need to be started.  < Variable Name | Data File Column Name | String Value > 

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM 
StartVMW "WinXP 64 bits"

CreateVMWSnapshot
Create a snapshot 

Syntax
CreateVMWSnapshot Name Description VMWName  

Parameters
* Name - Name of snapshot. < Variable Name | Data File Column Name | String Value >
* Description - Description of snapshot. < Variable Name | Data File Column Name | String Value >
* VMWName - The name of VM which has been opened from OpenVMW statement. < Variable Name | Data File Column Name | String Value > 

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//create snapshot 
CreateVMWSnapshot  "Snapshot1" 	"Description"	"WinXP 64 bits"  


RestoreFirstVMWSnapshot
Revert to the first snapshot.

Syntax
RestoreFirstVMWSnapshot VMWName  

Parameters
* VMWName - Name of virtual machine. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//open vm on localhost
OpenVMW  "C:\\VM\XP.vmx"  "XPVM"  "WSLocal"
//start vm
StartVMW  "XPVM"
//restore first snapshot
RestoreFirstVMWSnapshot  "XPVM"

DeleteVMWSnapshot
Delete a snapshot.

Syntax
DeleteVMWSnapshot Name VMWName  

Parameters
* Name - Name of snapshot. < Variable Name | Data File Column Name | String Value >
* VMWName - The name of VM which has been opened from OpenVMW statement. < Variable Name | Data File Column Name | String Value >

Examples
//Open VM
OpenVMW "VMPath" "VMW1" "Host"
//Create snapshot
CreateVMWSnapshot "Snapshot1" "This is the first snapshot" "VMW1"
//Delete snapshot
DeleteVMWSnapshot  "Snapshot1"  "VMW1"

ShutdownVMW
Shutdown a virtual machine.

Syntax
 ShutdownVMW VMWName  

Parameters
* VMWName  - Name of virtual machine. < Variable Name | Data File Column Name | String Value >
Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a virtual machine
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM 
StartVMW "WinXP 64 bits" 
//shutdown VM
ShutdownVMW "WinXP 64 bits"

RevertToVMWSnapshot
Revert to snapshot.

Syntax
  RevertToVMWSnapshot Name VMWName  

Parameters
* Name - Name of snapshot. < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits" 
//create snapshot
CreateVMWSnapshot "Snapshot1" "This is the first snapshot" "WinXP 64 bits"
//revert to snapshot
RevertToVMWSnapshot "Snapshot1" "WinXP 64 bits"

LoginGuestVMW
Login guest operation system.

Syntax
  LoginGuestVMW Username Password VMWName  

Parameters
* UserName   - Username for authentication on the Guest OS.  < Variable Name | Data File Column Name | String Value >
* Password   -  Password for authentication on the Guest OS.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >
Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//open VM
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits" 
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"


CreateVMWFolder
Create folder in guest operation system.

Syntax
  CreateVMWFolder Path VMWName  

Parameters
* Path - the path of folder. < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits" 
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"
//create folder
CreateVMWFolder "C:\\FolderName" "WinXP 64 bits"



CopyFileFromHostToVMWGuest
Copy file from host to guest operation system.

Syntax
  CopyFileFromHostToVMWGuest HostFilePath GuestFilePaht VMWName  

Parameters
* HostFilePath -The path name of a file system available to QAPlayer tool < Variable Name | Data File Column Name | String Value >
* GuestFilePath  - The path name of a file sysyem available to guest.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"
//Copy file to guest
CopyFileFromHostToVMWGuest "C:\\HostDir\HostFile.txt" "C:\\GuestDir\GuestFile.txt"

RunProgramInVMWGuest
Run program in virtual machines.

Syntax
  RunProgramInVMWGuest ProgramName CommentLines VMWName  

Parameters
* ProgramName - The path name of an executable file on the guest operating system. < Variable Name | Data File Column Name | String Value >
* CommetLine    - A string to be passed as command line arguments to the executable identified by guestProgramName.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits" 
//run program
RunProgramInVMWGuest "C:\\ProgramFiles\InternetExplorer.exe" "http://www.google.com"' "WinXP 64 bits"
CopyFileFromVMWGuestToHost
Copy file from guest to host.

Syntax
  CopyFileFromVMWGuestToHost GuestFilePath HostFilePath VMWName  

Parameters
* GuestFilePath  - The path name of a file sysyem available to guest.  < Variable Name | Data File Column Name | String Value >
* HostFilePath -The path name of a file system available to QAPlayer tool < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits" 
//Copy file to host
CopyFileFromVMWGuestToHost "C:\\GuestDir\GuestFile.txt" "C:\\HostDir\HostFile.txt"

DeleteVMWFolder
Delete folder in guest operation system.

Syntax
  DeleteVMWFolder Path VMWName  

Parameters
* Path - the path of folder. < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >
Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits" 
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"  
//delete folder
DeleteVMWFolder "C:\\FolderName" "WinXP 64 bits"



DeleteVMWFile
Delete file in guest operation system.

Syntax
  DeleteVMWFile FilePath VMWName  

Parameters
* Path - the path of file need to be deleted. < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits" 
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"  
//delete file
DeleteVMWFile "C:\\FolderName\FileName.txt" "WinXP 64 bits"

PauseVMW
 Pause a VM on the host.
Syntax
  PauseVMW  VMName  

Parameters
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >
Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits" 
//Pause VM
PauseVMW "WinXP 64 bits"



UnpauseVMW
 Unpause a VM on the host.

Syntax
  UnpauseVMW  VMName  

Parameters
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits" 
//Pause VM
PauseVMW "WinXP 64 bits"
//Unpause VM
UnpauseVMW "WinXP 64 bits"



ResetVMW
 Reset a VM on the host.

Syntax
  ResetVMW  VMName  

Parameters
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >
Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits" 
//Reset VM
ResetVMW "WinXP 64 bits"

SuspendVMW
 Suspend a VM on the host.

Syntax
  SuspendVMW  VMName  

Parameters
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal"
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits" 
//Suspend VM
SuspendVMW "WinXP 64 bits"

DirectoryExistsInVMWGuest
 Test directory exists in guest.
Syntax
  DirectoryExistsInVMWGuest Path VMWName  

Parameters
* Path   -  The path to the directory in the guest to be checked.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of the VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"  
//check
DirectoryExistsInVMWGuest "C:\\folder1" "WinXP 64 bits"

FileExistsInVMWGuest
 Test file exists in guest.

Syntax
  FileExistsInVMWGuest Path VMWName  

Parameters
* Path   -  The path to the file in the guest to be checked.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of the VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits"  
//check
FileExistsInVMWGuest "C:\\folder1\file1.txt" "WinXP 64 bits"
RenameFileInVMWGuest
 Rename file in guest operation system.

Syntax
  RenameFileInVMWGuest OldName NewName VMWName  
Parameters
* OldName   - The path to the file to be renamed.  < Variable Name | Data File Column Name | String Value >
* NewName   -  The path to the new file.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM named
StartVMW "WinXP 64 bits" 
//login
LoginGuestVMW "username" "password" "WinXP 64 bits" 
//rename file
RenameFileInVMWGuest "C:\\folder1\old.txt" "C:\\folder1\new.txt" "WinXP 64 bits"
RenameFileInVMWGuest "C:\\OldFolder" "C:\\NewFolder" "WinXP 64 bits"

RunScriptInVMWGuest
 Run script in guest operation system.
Syntax
  RenameFileInVMWGuest RunScriptInVMWGuest Interpreter ScriptText VMWName  

Parameters
* Interpreter - The path to the script interpreter, or NULL to use cmd.exe as the interpreter on Windows. < Variable Name | Data File Column Name | String Value >
* ScriptText    - The text of the script.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >
Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits" 
//run perl script
RunScriptInVMWGuest "C:\\Perl\Perl.exe" "print \"my name is Trung\""' "WinXP 64 bits"

//run commandline
RunScriptInVMWGuest "[null]" "exit"' "WinXP 64 bits"


CaptureVMWScreenImage
 Capture screen image.

Syntax
  CaptureVMWScreenImage Path VMWName  


Parameters
* Path   -  path of image.  < Variable Name | Data File Column Name | String Value >
* VMWName  - Name of VM. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//start VM
StartVMW "WinXP 64 bits"
//login
LoginGuestVMW "username" "password" "WinXP 64 bits" 

//capture screen image
CaptureVMWScreenImage "C:\\CaptureScreenImagel.png" "WinXP 64 bits"



CloneVMW
 Creates a copy of the virtual machine.

Syntax
  CloneVMW CloneType VMWName DestPath  
Parameters
* CloneType  - Constans value. < Full | Linked >
Full : Creates a full, independent clone of the virtual machine

Linked : Creates a linked clone, which is a copy of a virtual machine that shares virtual disks with the parent virtual machine in an ongoing manner.
* VMWName  - The VM to be cloned. < Variable Name | Data File Column Name | String Value >
* DestPath  - The path name of the virtual machine configuration file that will be created for the virtual machine clone produced by this operation. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//Clone
CloneVMW "Full" "WinXP 64 bits" "C:\Virtual Machines\VMClone.vmx"

DeleteVMW
 Delete the virtual machine.

Syntax
  DeleteVMW VMWName  


Parameters
* VMWName  - The VM to be deleted. < Variable Name | Data File Column Name | String Value >

Examples
//connect to Workstation on localhost
ConnectToVMWServer "Workstation"  "[null]"  "[null]"  "[null]"  "[null]"  "WSLocal" 
//Open a VM on workstation host
OpenVMW  "C:\VMs\Xp64bit.vmx"  "WinXP 64 bits"  "WSLocal" 
//Delete VM
DeleteVMW "WinXP 64 bits"



IOFile Syntax
The statements or commands in this section allow us to process IO operations with files and folders.

SetPermissions
SynTax
SetPermissions         Path     Account           Rights    AccessType

Parameters
* Path — Path to files or folders need to set permissions. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* Account — Account name < Variable Name | Data File Column Name | String Value >.
* Rights — Name of rights. Using pipe(“|”) to separate rights. The right is defined as one of these items: Read, AppendData, ChangePermission, CreateDirectories, CreateFiles, Delete, DeleteSubdirectoriesAndFiles, ExecuteFile, FullControl, ListDirectory, Modify, ReadAndExecute, ReadAttributes, ReadData, ReadExtendedAttributes, ReadPermissions, Synchronize, TakeOwnerShip, Traverse, WriteAttributes, WriteData and WriteExtendedAttributes. < Variable Name | Data File Column Name | String Value >.
* AccessType—  < Variable Name | Data File Column Name | String Value >
Examples 
//Set permissions for file
SetPermissions   "\\199.30.30.13\Temp\TrungNguyen\QAPlayer.exe”        “Trung.Nguyen”   "Read|AppendData”            “Allow”

//Set permissions for all files named file1 with 3 characters extension in “C:\tpm” folder
SetPermissions   "C:\tpm\file1.???”        “Trung.Nguyen”   "Read|AppendData”     “Allow”

//Set permissions for all files with txt extension in “C:\tpm”
SetPermissions   "C:\tpm\*.txt”        “Trung.Nguyen”   "Read|AppendData”            “Allow”

//Set permission for folder 
SetPermissions   "C:\tpm”        “Trung.Nguyen”   "Read|AppendData”       “Allow”

SetAttributes
SynTax
SetAttributes   Path   ReadOnly   Hidden   ApplyToSubfolders
Parameters
* Path — Path to files or folders need to set attributes. <Variable Name | Data File Column Name | String Value >.
* ReadOnly — Constants value. < 0 | 1 >.
value 0: Set ReadOnly attribute = False
value 1: Set ReadOnly attribute = True
* Hidden — Constants value. < 0 | 1 >.
value 0: Set Hidden attribute = False
value 1: Set Hidden attribute = True
* ApplyToSubfolders — Constants value. < 0 | 1 >.
value 0: Apply to subfolders
value 1: Not apply to subfolders
Examples

//Set ReadOnly = false and Hidden = false for file
SetAttributes   "C:\tpm\file1.txt"   "0"    “0”

//Set ReadOnly = false and Hidden = false for all file with “.txt” extension in “C:\tpm”
SetAttributes   "C:\tpm\*.txt"   "0"    “0”

//Set ReadOnly = false and Hidden = false for folder and not apply to subfolders
SetAttributes   "C:\tpm"   "0"    “0”    “0”

//Set attributes for folder and apply to subfolders
SetAttributes   "C:\tpm"   "0"    “0”    “1”

CopyFiles
SynTax
CopyFiles    Source    Destination
Parameters
* Source — the path of source file. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* Destination — the path of destination file. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
Example

//Copy all files with “.txt” extension in “C:\tpm” directory to “C:\tpm2”
CopyFiles   "C:\tpm\*.txt"       “C:\tpm2”

//Copy all .txt files with 4 characters name and starting with “abc” in “C:\tpm” directory to “C:\tpm2”
CopyFiles   “C:\tpm\abc?.txt”    “C:\tpm2”

//Copy file 
CopyFiles   "\\199.30.30.13\Temp\TrungNguyen\QAPlayer.exe”    “C:\tpm2”

CopyFolders
SynTax
CopyFolders    Source    Destination
Parameters
* Source — the path of source directory. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* Destination — the path of destination directory. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
Example
//Copy all subfolders start with “Trung” in “\\199.30.30.13\Temp” to “C:\tpm2”
CopyFolders   "\\199.30.30.13\Temp\Trung*"       “C:\tpm2”

//Copy all folders with 6 characters name and start with “Trung” in “\\199.30.30.13\Temp” //to “C:\tpm2”
CopyFolders   "\\199.30.30.13\Temp\Trung?”    “C:\tpm2”

CreateFolder
SynTax
CreateFolder    Path
Parameters
* Path — the path of new folder need to create.  < Variable Name | Data File Column Name | String Value >.
Example

//Create folder
CreateFolder   "C:\tpm”

DeleteFolders
SynTax
DeleteFolders     Path
Parameters
* Path — the path to the folder need to delete. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
Example

//Delete a folder
DeleteFolder   "C:\tpm”

//Delete all subfolders in “C:\tpm”
DeleteFolder   "C:\tpm\ *”

//Delete all subfolders in “C:\tpm” start with “abc”
DeleteFolder   "C:\tpm\abc*”

//Delete all subfolders in “C:\tpm” with 4 characters name and start with “abc”
DeleteFolder   "C:\tpm\abc?”

DeleteFiles
SynTax
DeleteFiles         FileName 
Parameters
* FileName — Name of file. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
Example
            
//Delete a file 
DeleteFiles   "C:\tpm\file1.txt"
//Delete all files in “C:\tpm” directory
DeleteFiles   "C:\tpm\*"

//Delete all “.txt” files in “C:tpm” directory
DeleteFiles   "C:\tpm\*.txt"

//Delete all files in “C:tpm” directory with name start with “abc”
DeleteFiles   "C:\tpm\abc*"

EmptyFolders
SynTax
EmptyFolders    FolderName    ApplyToSubfolders
Parameters
* FolderName — Name of folder need to empty. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* ApplyToSubfolders — Constants value. < 0 | 1 | 2 >.
value 0: delete all files and subfolders in specific folders 
value 1: empty all subfolders(delete all files on subfolders)
value 2: delete all files in the folder and not empty all subfolders
Example
//empty a folder(delete all files and subfolders in the folder)
EmptyFolders   "C:\tpm”   0
//empty all folders and subfolders in “\\ServerName\tpm” directory which have name start //with “abc”
EmptyFolders   "\\ServerName\tpm\abc*”   1
//empty folder(only delete files in the folder, not delete subfolders) and not empty //subfolders(not delete files and subfolders in the subfolders)
EmptyFolders   "\\ServerName\tpm\abc”   2

MoveFiles
SynTax
MoveFiles    Source    Destination
Parameters
* Source — Name of file need to move. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* Destination— Name of file need to move to. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
Example
//Move file            
MoveFiles   "\\ServerName\tpm\file1.txt”       "C:\tpm\”
//Move all files in “C:\tpm” directory to C:\tpm2
MoveFiles   "C:\tpm\*"    “C:\tpm2”
//Move all “.txt” files in “C:\tpm” directory to “C:\tpm2” directory
MoveFiles   "C:\tpm\*.txt"    “C:\tpm2”
//Move all files in “C:\tpm” directory with name start with “abc”
MoveFiles   "C:\tpm\abc*"   “C:\tpm2”

MoveFolders
SynTax
MoveFolders      Source              Destination
Parameters
* Source — Name of folder need to move. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* Destination— Name of folder need to move to. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
Examples

//Move folder
MoveFolders    "\\ServerName\tpm”       "C:\tpm\”
//Move all subfolders in “C:\tpm” directory to C:\tpm2
MoveFolders   "C:\tpm\*"    “C:\tpm2”
//Move all subfolders  in “C:\tpm” directory with name start with “abc” to “C:\tpm2”
MoveFolders   "C:\tpm\abc*"   “C:\tpm2”


CompressFiles
SynTax
CompressFiles    Path    Destination
Parameters
* Path — The path of files need to compress. We can use wildcard characters or UNC notation for this parameter < Variable Name | Data File Column Name | String Value >.
* Destination — The file name of compressing file. < Variable Name | Data File Column Name | String Value >.
Remark
           The compressed file will overwrite the existed file in silently.
Example
CompressFiles   "C:\tpm\file*.txt”    "D:\tpm\MyZip.Zip”

GetXMLNodeCountValue
Get the Xml node count value from the multiple xml files in a Zipped file.

Syntax
GetXMLNodeCountValue  ZipFilePath  MatchPath	VariableName

Parameters
* ZipFilePath — the path of Zip files need to extract xml files from it. It is a mandatory field.
* MatchPath —the path the match node from Root in the XML files. It is a mandatory field.
* VariableName—the variable’s name to store the value. It is a mandatory field.

Example 
GetXMLNodeCountValue   "C:\MyZippedFile.zip"   "Root"          MyVariable
GetXMLNodeCountValue   "C:\MyZippedFile.zip"   "Root/Match"    MyVariable                 
GetXMLNodeCountValue   "C:\MyZippedFile.zip"  "Root/Match/Config"  MyVar            
CompressFolders
SynTax
CompressFolders    Path    Destination
Parameters
* Path — The path of files need to compress. We can use wildcard characters or UNC notation for this parameter. < Variable Name | Data File Column Name | String Value >.
* Destination — The file name of compressing file. < Variable Name | Data File Column Name | String Value >.
Remark
           The compressed file will overwrite the existed file in silently.
Example
CompressFolders   "C:\tpm\*”    "D:\tpm\MyZip.Zip”

DecompressFiles
SynTax
DecompressFiles    Path    Destination 
Parameters
* Path — The path of files need to compress. We can use wildcard characters or UNC notation for this parameter. < Variable Name | Data File Column Name | String Value >.
* Destination — The path of folder to contain extracted files/folders. < Variable Name | Data File Column Name | String Value >.
Remark
           Extracted data will be overwritten in silently if exist. 
Example
DecompressFiles    "D:\tpm\MyZip.Zip”    “C:\tmp”.

VerifyFileExists
SynTax
VerifyFileExists 	Path 	Condition 	Minutes	VariableName
Parameters
* Path — The path of file need to be verified. We can use wildcard characters or UNC notation for this parameter. < Variable Name | Data File Column Name | String Value >.
* Condition — Ture|False. < Variable Name | Data File Column Name | String Value >.
* Minutes— Waiting for given minutes before checking the file existence with the condition. A positive integer< Variable Name | Data File Column Name | String Value >
* VariableName – The name of the variable that you want to save the result of the verification.  Note that if the VariableName is specified, the statement will not fail the test case when the result is negative.

Example
VerifyFileExists "C:\Wix3.5.2519.msi" "true" 0
VerifyFileExists "C:\Wix3.5.2519.msi" "false" 0
VerifyFileExists "C:\Wix3.5.2519.msi" "true" 2
VerifyFileExists "C:\Wix3.5.2519.msi" "false" 2		V.Result

VerifyFolderExists
Syntax
VerifyFolderExists 	Path 	Condition 	Minutes	VariableName
Parameters
* Path — The path of folder
* Condition — Ture|False. < Variable Name | Data File Column Name | String Value >.
* Minutes— Waiting for given minutes before checking the folder existence with the condition. A positive integer< Variable Name | Data File Column Name | String Value >
* VariableName – The name of the variable that you want to save the result of the verification.  Note that if the VariableName is specified, the statement will not fail the test case when the result is negative.

Example
VerifyFolderExists "C:\myfolder" "true" 0
VerifyFolderExists "C:\myfolder" "false" 0
VerifyFolderExists "C:\myfolder" "true" 2
VerifyFolderExists "C:\myfolder" "false" 2		V.Result

ConvertXMLInZipToString
Convert the XML files inside a zip file to string variable
Syntax
ConvertXMLInZipToString    Path    VariableName 
Parameters
* Path — The path of the zip file
* VariableName — The name of the variable that you want to save the xml string to
Example
ConvertXMLInZipToString		"C:\WStest.zip"		V.TestXML

MergeXMLsToOneFile
Merge the contents of XML files inside a zip file or folder to one file or a variable
Syntax
MergeXMLsToOneFile	SourcePath    VariableName 	TargetPath
Parameters
* SourcePath — The path of the zip file or folder of the xml files that you want to merge
* VariableName — The name of the variable that you want to save the xml string
* TargetPath — The path of the text or xml file you want to save the xml content
Example
MergeXMLsToOneFile		"C:\Temp\zip\unzip\home\ph\ca"		V.Result
MergeXMLsToOneFile		"C:\Temp\zip\unzip\home\ph\ca"		""			"C:\Temp\zip\unzip\home\ph\ca\combine.xml"



Network Syntax
The statements or commands in this section allow us to process network related operations.
Ping
Ping a computer or an IP address
SynTax
Ping HostName
Parameters
* HostName — Computer name or IP address.   < Variable Name | Data File Column Name | String Value >
Example
SetVariable V.HostName  “174.16.10.245”
 Ping V.HostName

SetVariable V.HostName ”HOANNGUYEN-PC”
Ping V.HostName

MapDrive
Map Drive on a machine or multi machines
SynTax 
MapDrive Folder Drive UserName Password
Parameters
* Folder — Name of folder < Variable Name | Data File Column Name | String Value >
* Drive  — Name of drive wants to map < Variable Name | Data File Column Name | String Value >
* UserName — User name login of machine < Variable Name | Data File Column Name | String Value >
* Password — Password login of machine < Variable Name | Data File Column Name | String Value >

Example
 MapDrive  “\\HOANNGUYEN-PC\C$”  “Z” “Hoan.Nguyen” “123456” 
MapDrive  “\\174.16.10.171\C$”  “Z” “Hoan.Nguyen” “123456”

UnmapDrive
Unmap Drive on machine.
SynTax 
UnmapDrive  Drive
Parameters
* Drive  — Name of drive wants to unmap < Variable Name | Data File Column Name | String Value >
Example
UnmapDrive  “Z”

UnmapDrives
As a QAPlayer user I want to unmap all mapped drives.
SynTax: 
UnmapDrives  
Example
UnmapDrives  

CheckNetwork 
Check network status of machine before connecting to another machine.
SynTax
CheckNetwork FileName

Parameters
* FileName — Name of Network < Variable Name | Data File Column Name | String Value >
Example
SetVariable V.LocalNetwork “Local Area Connection”
CheckNetwork V.LocalNetwork

ConnectToServer
As a QAPlayer user I want to be able to connect to server but it does not map a drive. 
SynTax
ConnectToServer ServerName Username Password
Parameters
* ServerName— Name or IP of server < Variable Name | Data File Column Name | String Value >
* Username — Username of server < Variable Name | Data File Column Name | String Value >
* Password — Password of server < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.ServerName “\\AUTHO”
SetVariable V.ServerName “\\174.16.10.242”
SetVariable V.Username “Administrator”
SetVariable V.Password “123456@”
ConnectToServer V.ServerName V.Username V.Password







DisconnectServer
As a QAPlayer user I want to be able to disconnect server connected. 
SynTax
DisconnectServer ServerName
Parameters
* ServerName— Name or IP of server < Variable Name | Data File Column Name | String Value >
Example
SetVariable V.ServerName “\\AUTHO” 
SetVariable V.ServerName “\\174.16.10.242”
DisconnectServer V.ServerName

DisconnectServers
As a QAPlayer user I want to be able to disconnect servers connected. 
SynTax
DisconnectServers 
Example
DisconnectServers



Email Syntax
The statements or commands in this section allow us to send emails.
SetMailServer
SynTax
SetMailServer    ServerName    Port    [MailAccount    Password]
Parameters
* ServerName — The name of SMTP server < Variable Name | Data File Column Name | String Value >.
* Port — TCP/IP port on SMTP server < Variable Name | Data File Column Name | String Value >.
* MailAccount — Email account used to send the emails. < Variable Name | Data File Column Name | String Value >.
* Password — Password of MailAccount < Variable Name | Data File Column Name | String Value >.

Remarks
      If sending emails from the Absolute internal network, the username and password is not required.

Examples 
//set mail server using Absolute smtp
SetMailServer   "smtp.absolute.com”    “25”    

//set mail server using S3corp smtp
SetMailServer   "smtp.s3corp.com.vn”    “999999”    "Trung.Nguyen”    “lPassword”

SendEmail
SynTax
SendEmails    From    To    Subject    BodyText    CCs    BCCs  AttachedFiles	HTML
Parameters
* From — Sender email .< Variable Name | Data File Column Name | String Value >.
* To — Receiver email. < Variable Name | Data File Column Name | String Value >.
* Subject — The email subject. < Variable Name | Data File Column Name | String Value >.
* BodyText— The email body text. < Variable Name | Data File Column Name | String Value >.
* CCs — List of CC emails, separated by “;”.< Variable Name | Data File Column Name | String Value >.
* BCCs — List of BCC emails, separated by “;”.< Variable Name | Data File Column Name | String Value >.
* AttachedFiles — List of file pathes, separated by “;”.< Variable Name | Data File Column Name | String Value >
* HTML – true or false to indicate that the email body is HTML.
Examples
//Trung.Nguyenc@S3corp.com.vn send an email to Hoan.Nguyen@S3corp.com.vn and //Tuan.Nguyen@S3corp.com.vn, CC: Long.Dang@S3corp.com.vn and Miguel@S3corp.com.vn, BCC: //thanh.nguyen@S3corp.com.vn with 2 attached files.

SendEmail   "Trung.Nguyenc@S3corp.com.vn"   "Hoan.Nguyen@S3corp.com.vn;Tuan.Nguyen@S3corp.com.vn"    “Email subject”    “Email content”    “Long.Dang@S3corp.com.vn;Miguel@S3corp.com.vn”    “Thanh.Nguyen@S3corp.com.vn” “C:\AttatchedFile1.txt;C:\AttatchedFile2.txt”  

SendEmailFromFiles
SynTax
SendEmailFromFiles From To Subject Files CCs BCCs  AttachedFiles
Parameters
* From — Sender email. < Variable Name | Data File Column Name | String Value >.
* To — Receiver email. < Variable Name | Data File Column Name | String Value >.
* Subject — The email subject. < Variable Name | Data File Column Name | String Value >.
* Files — List of file pathes. The file contents will be appended into email body. < Variable Name | Data File Column Name | String Value >.
* CCs — List of CC emails, separated by “;”.< Variable Name | Data File Column Name | String Value >.
* BCCs — List of BCC emails, separated by “;”.< Variable Name | Data File Column Name | String Value >.
* AttachedFiles — List of file pathes, separated by “;”.< Variable Name | Data File Column Name | String Value >.
Examples
SendEmailFromFiles   "Trung.Nguyenc@S3corp.com.vn"   "Hoan.Nguyen@S3corp.com.vn;Tuan.Nguyen@S3corp.com.vn"    “Email subject”    “c:\mailbody.txt”    “Long.Dang@S3corp.com.vn;Miguel@S3corp.com.vn”    “Thanh.Nguyen@S3corp.com.vn” “C:\AttatchedFile1.txt;C:\AttatchedFile2.txt”   


Performance Monitor Syntax

VerifyPerformanceCounter
As a QAPlayer user I want to be able to verify the value of a Counter at current time or in duration of time.

Syntax 
VerifyPerformanceCounter PerformanceCategory CounterName InstanceName ServerName Operator Value Duration

Parameters
* PerformanceCategory — The name of Performance Category. < Variable Name | Data File Column Name | String Value >
* CounterName — The name of Performance Counter. < Variable Name | Data File Column Name | String Value >
* InstanceName — The name of an instance of selected Performance Counter. < Variable Name | Data File Column Name | String Value >
* ServerName — The name(IP) of server. < Variable Name | Data File Column Name | String Value >
* Operator — The name of operator (GreaterThan, SmallerThan, EqualTo, NotEqualTo, InRange). < Variable Name | Data File Column Name | String Value >
* Value — The return value of Performance Counter. < Variable Name | Data File Column Name | String Value >
* Duration — Duration of time(positive integer in seconds) need to verify. < Variable Name | Data File Column Name | String Value >


Examples

VerifyPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “GreaterThan” “80” “60”
VerifyPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “SmallerThan” “80” “30”

VerifyPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “EqualTo” “80” “10”
VerifyPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “NotEqualTo” “80” “0”
VerifyPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “InRange” “80|100”

GetPerformanceCounterValue
As a QAPlayer user I want to be able to get the value of a Counter at current time or in duration of time.

Syntax 
GetPerformanceCounterValue PerformanceCategory CounterName InstanceName ServerName Duration VariableName

Parameters
* PerformanceCategory — The name of Performance Category. < Variable Name | Data File Column Name | String Value >
* CounterName — The name of Performance Counter. < Variable Name | Data File Column Name | String Value >
* InstanceName — The name of an instance of selected Performance Counter. < Variable Name | Data File Column Name | String Value >
* ServerName — The name (IP) of server. < Variable Name | Data File Column Name | String Value >
* Duration — Duration of time(positive integer in seconds) need to verify. < Variable Name | Data File Column Name | String Value >
* VariableName— The variable to store the value of the Performance Counter.


Examples
//Get perf counter value from the localhost.
GetPerformanceCounterValue "Processor" "% Processor Time" "_Total" "."  "10" "Variable1"
//Get perf counter value by server name.
GetPerformanceCounterValue "Processor" "% Processor Time" "_Total" "ABS-LIN93"  "10" "Variable1"

WaitIfPerformanceCounter
As a QAPlayer user I want to be able to wait if the value of a Counter at current time or in duration of time does not satisfy the condition.

Syntax 
WaitIfPerformanceCounter PerformanceCategory CounterName InstanceName ServerName Operator Value Duration

Parameters
* PerformanceCategory — The name of Performance Category. < Variable Name | Data File Column Name | String Value >
* CounterName — The name of Performance Counter. < Variable Name | Data File Column Name | String Value >
* InstanceName — The name of an instance of selected Performance Counter. < Variable Name | Data File Column Name | String Value >
* ServerName — The name(IP) of server. < Variable Name | Data File Column Name | String Value >
* Operator — The name of operator (GreaterThan, SmallerThan, EqualTo, NotEqualTo, InRange). < Variable Name | Data File Column Name | String Value >
* Value — The return value of Performance Counter. < Variable Name | Data File Column Name | String Value >
* Duration — Duration of time(positive integer in seconds) need to verify. < Variable Name | Data File Column Name | String Value >


Examples

WaitIfPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “GreaterThan” “80” “60”
WaitIfPerformanceCounter “Processor” “% Processor Time” “_Total” “ABS-LIN93” “SmallerThan” “80” “30”

WaitIfPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “EqualTo” “80” “10”
WaitIfPerformanceCounter “Processor” “% Processor Time” “_Total” “ABS-LIN93” “NotEqualTo” “80” “0”
WaitIfPerformanceCounter “Processor” “% Processor Time” “_Total” “.” “InRange” “80|100”

WinEvent Syntax

VerifyWinEvents
As a QAPlayer user I want to be able to verify events the presence of windows events in the windows logs.

Syntax 
VerifyWinEvents LogName SourceName Level EventID TaskCategory Minutes Operator 

Parameters
* LogName—Log name of event. Log name can be Application, Security or System < Variable Name | Data File Column Name | String Value > 
* SourceName—Source name event. SourceName filter, can be "All" or any specific value < Variable Name | Data File Column Name | String Value > 
* Level—Level of event. Level filter, can be “All”, “Information”, “Warning”, or “Error” < Variable Name | Data File Column Name | String Value >
* EventID—ID of event. EventID filter, can be "All" or any specific value < Variable Name | Data File Column Name | String Value >
* TaskCategory—Task category of event. TaskCategory filter, can be "All" or any specific value < Variable Name | Data File Column Name | String Value > 
* Minutes—Maximum number of minutes since the event was logged to be considered in the filter. A positive integer< Variable Name | Data File Column Name | String Value >
* Operator —Name of operator (Exist, DoNotExist).
If the Operator is Exist, and there are events that match the filters, the events’ information (Level, Date and Time, Source, Event ID, Task Category) will be log the event description in the QAPlayer log.
If the Operator is Exist, and there are no events in the Windows Logs, log an error.
If the Operator is DoNotExist, and there are events that match the filters, an error and the events’ information (Level, Date and Time, Source, Event ID, Task Category) will be log the event description in the QAPlayer log.
If the Operator is DoNotExist, and the events do not exist, "Condition is true" will be logged.< Variable Name | Data File Column Name | String Value > 

Example
SetVariable V.LogName	"Application"
SetVariable V.SourceName "LANrev Agent Service"
SetVariable V.Level	     "All"
SetVariable V.EventID    “3244”
SetVariable V.TaskCategory “All” 
SetVariable V.Minutes      “30”
SetVariable V.Operator   "Exists"

VerifyWinEvents V.LogName V.SourceName V.Level V.EventID V.TaskCategory  V.Minutes  V.Operator




CreateWinEvents
As a QAPlayer user I want to be able to create an event of windows events in the windows logs.

Syntax 
CreateWinEvents LogName SourceName Level EventID Message 

Parameters
* LogName—Log name of event. Log name can be Application, Security or System < Variable Name | Data File Column Name | String Value > 
* SourceName —Source name event. < Variable Name | Data File Column Name | String Value > 
* Level—Level of event (Information, Warning, Error) < Variable Name | Data File Column Name | String Value >
* EventID—ID of event. A positive integer < Variable Name | Data File Column Name | String Value >
* Message — Message of event < Variable Name | Data File Column Name | String Value >

Example
SetVariable V.LogName	"Application"
SetVariable V.SourceName "LANrev Agent Service"
SetVariable V.Level	     "Error"
SetVariable V.EventID    “3244” 
SetVariable V.Message    “Log error for example”

CreateWinEvents V.LogName V.SourceName V.Level V.EventID V.Message


DeleteWinEvents
As a QAPlayer user I want to be able to delete all events of a log in the windows logs.
Syntax 
DeleteWinEvents LogName
Parameters
* LogName—Log name of event. Log name can be Application, Security or System < Variable Name | Data File Column Name | String Value > 

Example
SetVariable V.LogName	"Application"
DeleteWinEvents V.LogName 


WinService Syntax

EnableWService
As a QAPlayer user I want to be able to enable a Windows service by name.
Syntax 
EnableService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
EnableService “Dhcp”


DisableService
As a QAPlayer user I want to be able to disable a Windows service by name.
Syntax 
DisableService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
DisableService “Dhcp”



StartService
As a QAPlayer user I want to be able to start a Windows service by name.
Syntax 
StartService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
StartService “Dhcp”




StopService
As a QAPlayer user I want to be able to stop a Windows service by name.
Syntax 
StopService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
StopService “Dhcp”



RestartService
As a QAPlayer user I want to be able to restart a Windows service by name.
Syntax 
RestartService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
RestartService “Dhcp”

VerifyRunningService
As a QAPlayer user I want to be able to verify if a Windows service is running by name.
Syntax 
VerifyRunningService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
VerifyRunningService “Dhcp”

VerifyNotRunningService
As a QAPlayer user I want to be able to verify if a Windows service is not running by name.
Syntax 
VerifyNotRunningService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 

Example
VerifyNotRunningService “Dhcp”


VerifyDisplayNameService
As a QAPlayer user I want to be able to verify if a Windows service’s display name is correct.
Syntax 
VerifyDisplayNameService ServiceName

Parameters
* ServiceName —Name of service.< Variable Name | Data File Column Name | String Value > 
* DisplayName —Display name of service.< Variable Name | Data File Column Name | String Value > 


Example
VerifyDisplayNameService “Dhcp” “DHCP Client”



WCF Syntax
To support WCF tests.

SetWCFHeader
Set a header element and its value in HTTP requests.

Syntax
SetWCFHeader ElementName Value

Parameters
* ElementName — Variable name, the element name to be set in the header of HTTP requests.
* Value — Variable name, the value of the element in the header of HTTP requests. 

Examples
SetWCFHeader "Content-Type"  "application/soap"



CallWCFWebService
Call the WCF Web Service and get the response.

Syntax
CallWCFWebService Url Method Request Response

Parameters
* Url — Variable name, the web service Url.
* Method — Variable name, the HTTP method used to call the web service, e.g. POST.
* Request — Variable name, the WCF request data in the request body.
* Response— Variable name, the response from the web service. 

Examples











SetVarFromWCFHeader
Set a variable by a header element’s value.

Syntax
SetVarFromWCFHeader VariableName HeaderElementName

Parameters
* VariableName — Variable name, the variable’s name to be set.
* HeaderElementName — Variable name, the element name in the header of RESTful service. 

Examples
SetVarFromWCFHeader "myVariable"  "Content-Type"

VerifyWCFHeaderExists
Verify whether a header element exists.

Syntax
VerifyWCFHeaderExists HeaderElementName Operator

Parameters
* HeaderElementName — Variable name, the element name to verify.
* Operator — Constant name, <Exists | DoesNotExist>.

Examples
VerifyWCFHeaderExists "Content-Type"  "Exists"

VerifyWCFHeaderValue
Verify whether a header element’s value is expected.

Syntax
VerifyWCFHeaderValue HeaderElementName Operator Value

Parameters
* HeaderElementName — Variable name, the element name to verify.
* Operator — Constant name, <Equal | NotEqual>.

Examples
VerifyWCFHeaderValue "Content-Type" "Equal" "application/json"
VerifyWCFHeaderValue "Content-Type" "NotEqual" "application/jpeg"


VerifyWCFCallTime
Verify whether responses from the web service are returned within the given time.

Syntax
VerifyWCFCallTime TimeLimitMS

Parameters
* TimeLimitMS — Integer, the time limit in millisecond.
 
Examples
VerifyWCFCallTime	3000



VerifyWCFStatusCode
Verify the request call status code returned from the web service.

Syntax
VerifyWCFStatusCode ExpectedCode
Parameters
* ExpectedCode — Integer, the HTTP request status code.
 
Examples
VerifyWCFStatusCode	200

VerifyWCFStatusCode	404




EditWCFHeaderValue
Edit a value in the header OF WCF service.

Syntax
EditWCFHeaderValue HeaderName	Operator	Separator	ElementIndex
Parameters
* HeaderName — Variable name, the name of a header element.
* Operator — Constant value, <Split>.
* Separator — Variable name, the delimiter to separate the header value.
* ElementIndex — Variable name, the index in the string array after the value is separated. The new value will replace the original value in the header.
 
Examples
//Use the the second value in the array after the original value is separated.
EditWCFHeaderValue   "Cookie"    "Split"    ","         "1"




QA Player Variables

DOUBLESLASH
This variable can be used in scripts and data files when is necessary to include a Url address. The default value is “//”. The name of the variable will be substituted at the time of the execution of the statement.

Example
StartWebEngine “FireFox”
OpenWebUrl “http:%DOUBLESLASH%google.com”


RANDOMNUMBER
This variable can be used in scripts and data files when is necessary to add randomized information. The variable does not have a default value. The name of the variable will be substituted for an 64 bit integer at the time of the execution of the statement.

Example
TypeWebText “MyTextBoxControlName” “This is a number %RANDOMNUMBER%”


WAITFORWEBELEMENT
This variable can be used in scripts when is necessary to change the time out while waiting for web pages or web elements to be fully rendered. The unit is milliseconds. The default value is 60000 milliseconds. The default value can be changed with a SetVariable statement.

Example
SetVariable WAITFORWEBELEMENT “90000”


CPUPERCENTAGE
This variable can be used in scripts. If the application being tested is not working well or receiving the information correctly from the QA Player, set a low cpu percentage in order to make the computer wait until the processor is not so busy. If the cpu percentage of the computer is higher of the specified value, the execution of the test will stop until the number goes back to lower than it. The default value is 100. The default value can be changed with a SetVariable statement. Be aware that some computers never go below 50 or 60 percent, so be careful when changing this setting. If the execution of the test gets stuck for a very long time, change the value to something higher.

Example
SetVariable CPUPERCENTAGE “80”


ERRORLIMIT
This variable can be used in scripts. QA Player will stop the execution when the error limit is reached. The default value is 0 which means that there is no limit. The default value can be changed with a SetVariable statement.

Example
SetVariable ERRORLIMIT “3”

CURRENTSCRIPTREPETITION
This variable can be used in scripts and data files when users want to know the current repeat count of the current executed script. The value is specified by QA Player and cannot be modified through SetVariable.

Example
StopScriptIf CURRENTSCRIPTREPETITION = “3”

CURRENTSCRIPTFOLDER
This variable can be used in scripts and data files when users want to use the current executed script folder path. The value is defined by QA Player and cannot be modified through SetVariable.

Example
// Adds a folder to the path
AddPath "C:\Users\Username\Enterprise\Deployment\Script” 
//run the script MyScript which is in the folder Script
ExecuteScript MyScript 1 MyData 2
// removes the path
RemovePath CURRENTSCRIPTFOLDER


CURRENTDATAROW
This variable can be used in scripts and data files when users want to know the current data row. The value is defined by QA Player and cannot be modified.

Example
StopScriptIf CURRENTDATAROW = “3”


NEWGUID
This variable can be used in scripts and data files when is necessary to add unique ID. The variable does not have a default value. The system will generate a new guid when it is used.

Example
TypeWebText “MyTextBoxControlName” “This is a guid %NEWGUID%”



CURRENTDATAFILE
This variable can be used in scripts and data files when users want to know the current data file. The value is defined by QA Player and cannot be modified.

Example
ExecuteScript	AMCTIS.TestCase.Run	1 %CURRENTDATAFILE%	V.AMCTIS.TC.Row


ITEMCOUNTER
This variable can be used in scripts and data files when users want to use the item counter for a list. The value is defined by QA Player and cannot be modified.

Example
VerifyJsonDocPair DeviceRegistrationList ResponseData "75280c3c-3ea4-461f-ab36-c9598ac2c093" “Devices[%ITEMCOUNTER%].FingerprintData.AgentVersion”

TCFAILED
This variable can be used to get the total number of test cases failed in the current run. Before using this variable the statement “FinalizeResults” needs to be run first.
 
Example
FinalizeResults
SetVariable V.FailedTestCases “%TCFAILED%”

LASTSTATEMENTRESULT
This variable can be used in scripts and data files when users want to know the result of the previously executed statement. If the execution is good with no error, value will be set to zero (0).  Otherwise, value will be one (1).  The value is defined by QA Player and cannot be modified.

Example
IF “%LASTSTATEMENTRESULT%==0”
	//DO SOMETHING…
EndIf






LASTEXITCODE
The variable stores the exit code of the last ExecuteProgram statement.

Example
ExecuteProgram	Wait	“Aprograme.exe” “someParameters”

SetVariable	V.ReturnCode		“%LASTEXITCODE%”


UTCDATETIMENOW
The variable stores current utc time.

Example
//The format of output looks like “2014-07-24T03:11:33”
SetVariable	V.Current.UTC.Time		“%UTCDATETIMENOW%”




Image Comparison Feature
In some scenario, QA Player is not able to inspect on some elements during automation run, and therefore, QA Player cannot know the most current states of that elements.  For example, Adobe Flash is a multimedia and software platform used for creating graphics and animation etc that can be viewed, played and executed in Adobe Flash Player.  QA Player can only see the flash object, but have no control to any elements inside.


DesktopScreenshotCapture
This statement can help you to capture the screenshot of the desktop and save the image into the specified path and filename.
Syntax
DesktopScreenshotCapture 	Path	Filename

Parameters
* Path — The path of the folder that you want to save the image to
* Filename — The filename of the image
Example
DesktopScreenshotCapture	"%CURRENTSCRIPTFOLDER%\temp"	"baseline.PNG"



ImageCompare
This statement allows you to compare two images whether they are identical or not.  QA Player will compare pixel by pixel.  Tester can specify the maximum allowed limit of the percentage difference. 

Syntax
ImageCompare 	ImageBaselinePath	ImageTargetPath	ImageDiffOmitPath	ImageDiffResultPath	Threshold

Parameters
* ImageBaselinePath (Mandatory) — The path of the baseline image.  
o If the path is specified but the file doesn’t exist, a new desktop screenshot will be captured and saved to the path specified.  It will be used for comparison against the target image.
* ImageTargetPath — The path of the target image
o If the path is specified and the file exists, the file will be used as the target image for comparison
o If the path is specified but the file doesn’t exist, a new desktop screenshot will be captured and saved to the path specified.  It will be used for comparison against the baseline image.
o If the path is not specified, a new desktop screenshot will be captured and used for comparison against the baseline image.
* ImageDiffOmitPath — The path of the “Diff-Omit” image.  This image indicates the area that you want to skip in the comparison.  For more detail, please see the next section “How to exclude the area from the comparison?”
* ImageDiffResultPath (Mandatory) — The path of the compare result image.  It is considered as mandatory because this image can show the tester what’s the difference between the baseline and target image
* Threshold — The percentage of the pixels that are allowed to be different between baseline and target image.
Example
ImageCompare				
	"%CURRENTSCRIPTFOLDER%\temp\baseline.PNG"		
	"%CURRENTSCRIPTFOLDER%\temp\actual.PNG"		"%CURRENTSCRIPTFOLDER%\TestImageDiffRegion2.png"		"%CURRENTSCRIPTFOLDER%\TestImageDiffResult.png"		
	"0.1%"

How to exclude the area from the comparison?
In some situation, you may want to exclude some area on the image from comparison.  QA Player allows tester to provide an “Diff-Omit” image to indicate what area you want QA Player to ignore.  The following is the step-by-step procedures of how to setup this “Diff-Omit” image.

1. In this example, we will compare this chart generated from flash.  Tester only wants to verify the second bar on the left.  The baseline image is at the top, while the actual image is at the bottom.





2. Tester needs to create an image file with the same resolution as the baseline and target images.  In this image, put the area that you want to verify in black.  For the area that you want to skip, put them in white.  

3. It will look like this when you put the original image and the “Diff-Omit” together.  You can see that the black box is covering the second bar on the left completely and the pop up dialog partially.

4. After running the ImageCompare statement, the difference of two images will be generated and saved in a separate file.  You will see the difference in red.  



5. In this example, we also apply the “Diff-Omit” image to exclude some area.  That’s why the diff image only shows a portion of dialog pop up indicating as the difference.


QA Player Command Prompt
The QA Player can also be run as a command line application if one or more command parameters are specified. The following items are the parameters used by QA Player in command line. Please use them in order when running QA Player from command line. The first parameter must be specified, but the rest are optional.

Syntax
QAPlayer.exe InitScriptPath [[Repetitions [DataFilePath StartingRow] LogFileSuffixText TestSetId]

Parameters
* InitScriptPath — Path of the main script. The path must contain the file extension, which is “ts” in this case.
* Repetitions — Number of times the main script will be executed. The default value is 1 if not specified.
* DataFilePath — Path of the data file. The path can be the absolute path or the relevant to the main script path, e.g. “dataFile\EMS.User”. The file name does not need the extension. The parameter can be defined as null, e.g. “[null]”, if it is not used.
* StartingRow — This parameter has to be provided if the DataFileName parameter is present. This is the number of the first data row to be fetched by the data file. If the repetitions parameter is more than 1, the subsequent(s) rows will be used. The parameter can be defined as null, e.g. “[null]”, if it is not used.
* LogFileSuffixText — Suffix text of the QA Player log file, which is appended after “QAPlayerLog.”, e.g. “QAPlayerLog.CCTest.txt”. The log file is located in the same folder as the main script.
* TestSetId —The test set id in SpiraTest. To indicate what test cases are associated with the current test run.

Example
QAPlayer.exe “C:\automation\Scripts\myScript.ts” 1 “C:\automation\Scripts\myData.cvs” 2 “CCTest”

QAPlayer.exe “C:\automation\Scripts\myScript.ts” 1 “dataFile\myData.cvs” 2 “CCTest”

QAPlayer.exe “C:\automation\Scripts\myScript.ts” 1 “[null]” “[null]” “CCTest”

//The test set id in Spira is TX004098. Here we use 4098 as test set id.
//If the test set id doesn’t exist, QAPlayer will create a new one in Spira. However, the id may not be the one specified in the command line. The new id will be assigned by Spira.
QAPlayer.exe “C:\automation\Scripts\myScript.ts” 1 “[null]” “[null]” “CCTest” “4098”


Appendix

ControlData
For WinUI automation, ControlName is used to define the AutomationId for the control. Now, in ControlData we can define AutomationId, but also when the controls do not have AutomationId we can use their names, classes, and types.

The format to use AutomationId is the same as before. The format to use the other properties is as follows:
“[Name]:[Class]:[Type]:[Pos]”. Name, Class, and Type any two of them must be defined. The last item Pos is optional, and the default value is 0 if not defined.

One example is as follows:




We can use AutomationId to automate the click as below.

ClickButton	“btnDoSomething”

As we know, the most controls in AM do not have AutomationId. Just for the sake of the exercise let’s automate the alternative way.

So, we have the following properties:
* Name: Do Something
* ClassName: WindowsForms10.BUTTON.app.0.2bf8098_r15_ad1
* ControlType: ControlType.Button
* Position: int

With this information we can automate the action of clicking this button as follows:

ClickButton “Do Something:WindowsForms10.BUTTON:ControlType.Button” // 1
ClickButton “Do Something:WindowsForms10.BUTTON:” // 2
ClickButton “Do Something::ControlType.Button” // 3
ClickButton “Do Something::” // 4 will produce errors.
ClickButton “:WindowsForms10.BUTTON:ControlType.Button” // 5
ClickButton “:WindowsForms10.BUTTON:” // 6 wil produce errors.
ClickButton “::ControlType.Button” // 7 wil produce errors.
ClickButton “Do Something:WindowsForms10.BUTTON:ControlType.Button:1” //get the second button with name ‘Do Something’.

Now, even though these are the options we have, the more information we use the better chances we have of having this working fine. The best options here are 1, 2, 3 and  8. If you don’t use the Pos item in the control data and there are more than one button on the windows then QAPlayer will always click the first button that satisfies the conditions.


